<!----------------------------------------------------------------------------
   UnitTest.cpp.htm  -Published HTML File
   Published on : 2017-04-04.21:40:45
   Author:Karthik Palepally Muniyappa  
----------------------------------------------------------------------------->
<html>
<head>
<link rel="stylesheet" href="../CSS/style.css">
</head>
<body>
<h3>UnitTest.cpp</h3>
<hr />
<div class="indent">
<h4>Dependencies:</h4>
<ul>
<li><a href="CopyOfUnitTest.h.htm">CopyOfUnitTest.h</a></li>
<li><a href="UnitTest.h.htm">UnitTest.h</a></li>
<li><a href="Utilities.h.htm">Utilities.h</a></li>
</ul>
</div>
<hr />
<pre>
/////////////////////////////////////////////////////////////// 
// UnitTest.cpp - Demonstrate unit testing framework         // 
// ver 1.1                                                   // 
// --------------------------------------------------------- // 
// copyright © Jim Fawcett, 2012, 2013                       // 
// All rights granted provided that this notice is retained  // 
// --------------------------------------------------------- // 
// Jim Fawcett, CSE687-Object Oriented Design, Spring 2013   // 
/////////////////////////////////////////////////////////////// 
/* 
 * This is what a test class should look like: 
 */ 
#include "UnitTest.h" 
#include &lt;string&gt; 
#include &lt;iostream&gt; 
using namespace Test; 
 
 class TestStdStringClass : public TestBase&lt;TestStdStringClass&gt; 
 {<button onclick="myFunction(this)" id="button530">-</button><pre class="showElem" id="button530_pre"> 
 public: 
   bool TestConstruction() 
   {<button onclick="myFunction(this)" id="button531">-</button><pre class="showElem" id="button531_pre"> 
     bool t1, t2; 
     std::string s1("this is a string"); 
     t1 = (s1 == "this is a string"); 
     std::string s2; 
     t2 = (s2.size() == 0); 
     return checkResult(t1 && t2, "TestConstruction"); 
</pre>   } 
   bool TestCopy() 
   {<button onclick="myFunction(this)" id="button532">-</button><pre class="showElem" id="button532_pre"> 
     bool t1; 
     std::string orig = "a string"; 
     std::string copy = orig; 
     t1 = (copy == orig && &copy != &orig); 
     return checkResult(t1, "TestCopy"); 
</pre>   } 
   bool TestWillThrowStdException() 
   {<button onclick="myFunction(this)" id="button533">-</button><pre class="showElem" id="button533_pre"> 
     throw std::exception("TestWillThrowStdException"); 
     return true; 
</pre>   } 
   bool TestWillThrowStructuredException() 
   {<button onclick="myFunction(this)" id="button534">-</button><pre class="showElem" id="button534_pre"> 
     int x=1, y=0; 
     x = x/y; 
     return true; 
</pre>   } 
   bool test()  // overriding inherited test method 
   {<button onclick="myFunction(this)" id="button535">-</button><pre class="showElem" id="button535_pre"> 
     bool t1, t2, t3, t4; 
     t1 = doTest(&TestStdStringClass::TestConstruction); 
     t2 = doTest(&TestStdStringClass::TestCopy); 
     t3 = doTest(&TestStdStringClass::TestWillThrowStdException); 
     t4 = doTest(&TestStdStringClass::TestWillThrowStructuredException); 
     return t1 && t2 && !t3 && !t4; 
</pre>   } 
 private: 
   // save here data needed in more than one test  
</pre> }; 
#ifdef TEST_UNITTEST 
int main() 
{<button onclick="myFunction(this)" id="button536">-</button><pre class="showElem" id="button536_pre"> 
  Title("Demonstrating UnitTest Package"); 
 
  TestStdStringClass test; 
  if(test.test()) 
    std::cout &lt;&lt; "\n  all tests passed"; 
  else 
    std::cout &lt;&lt; "\n  one or more tests failed"; 
  std::cout &lt;&lt; "\n\n"; 
</pre>} 
#endif 
</pre>
<script src="../JS/hideHandler.js"></script>
</body>
</html>