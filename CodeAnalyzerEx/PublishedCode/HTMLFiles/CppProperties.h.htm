<!----------------------------------------------------------------------------
   CppProperties.h.htm  -Published HTML File
   Published on : 2017-04-04.21:40:35
   Author:Karthik Palepally Muniyappa  
----------------------------------------------------------------------------->
<html>
<head>
<link rel="stylesheet" href="../CSS/style.css">
</head>
<body>
<h3>CppProperties.h</h3>
<hr />
<div class="indent">
<h4>Dependencies:</h4>
<ul>
<li><a href="CppProperties.cpp.htm">CppProperties.cpp</a></li>
</ul>
</div>
<hr />
<pre>
#pragma once 
///////////////////////////////////////////////////////////////////// 
// CppProperties.h - Defines read/write and read only properties   // 
//                                                                 // 
// Jim Fawcett, CSE687 - Object Oriented Design, Spring 2017       // 
///////////////////////////////////////////////////////////////////// 
// 
// Got the idea from discussion here (scroll down about halfway): 
// http://stackoverflow.com/questions/8368512/does-c11-have-c-style-properties 
// This implementation is quite different however. 
/* 
 * - fixed bug in Property class by adding copy constructor that only 
 *   copies data member value.  The default copy constructor copies 
 *   all memebers including getter_ and setter_ 
*/ 
#include &lt;iostream&gt; 
#include &lt;functional&gt; 
///////////////////////////////////////////////////////////////////// 
// Property&lt;T&gt; class provides encapsulated properties for C++ 
// - getter and setter functions can be customized without changing 
//   the client interface for any class that uses Property&lt;T&gt; 
// 
template&lt;typename T&gt; 
class Property 
{<button onclick="myFunction(this)" id="button24">-</button><pre class="showElem" id="button24_pre"> 
public: 
  // initialize the property field 
  Property() : value(T()) {} 
  Property(const Property&lt;T&gt;& p) : value(p.value) {}  // added this fix 
  Property(const T& t) : value(t) {} 
  virtual ~Property() {} 
  // set the property field with assignment operator 
  virtual Property&lt;T&gt;& operator=(const T &t)<button onclick="myFunction(this)" id="button28">-</button><pre class="showElem" id="button28_pre"> 
  {  
    value = setter_(t);  
    //getter_ = [=]() { return value; }  // Ronak's solution 
    return *this;  
</pre>  } 
  // get the property field with cast operator 
  virtual operator const T() const { return getter_(); } 
  // define methods to customize getter and setter behaviors 
  void setter(std::function&lt;T(const T&)&gt; sttr) { setter_ = sttr; } 
  void getter(std::function&lt;T(void)&gt; gttr) { getter_ = gttr; } 
  T getValue() { return value; }  // used by custom getters 
protected: 
  T value;  // property field 
  // define default getter and setter behavior using lambdas 
  std::function&lt;T(const T&)&gt; setter_ = [](const T& t) { return t; };  // setter 
  std::function&lt;T()&gt; getter_ = [=]() { return value; };               // getter 
</pre>}; 
/*----&lt; overload insertion operator for std::string properties &gt;---*/ 
inline std::ostream& operator&lt;&lt;(std::ostream& out, Property&lt;std::string&gt;& p) 
{<button onclick="myFunction(this)" id="button32">-</button><pre class="showElem" id="button32_pre"> 
  std::string temp = p; 
  try { 
    out &lt;&lt; (temp).c_str(); 
  } 
  catch (std::exception& ex) 
  { 
    std::cout &lt;&lt; "\n  exception:\n  " &lt;&lt; ex.what() &lt;&lt; "\n"; 
  } 
  return out; 
</pre>} 
///////////////////////////////////////////////////////////////////// 
// Property&lt;const T&gt; class provides encapsulated properties for C++ 
// - getter function can be customized without changing 
//   the client interface for any class that uses Property&lt;T&gt; 
// - no setter is provided since the class is used for const properties 
// - comments for this class would be same as above, and so are omitted 
// 
template&lt;typename T&gt; 
class Property&lt;const T&gt; 
{<button onclick="myFunction(this)" id="button33">-</button><pre class="showElem" id="button33_pre"> 
public: 
  Property() : value(T()) {} 
  Property(const Property&lt;T&gt;& p) : value(p.value) {} 
  Property(const T& t) : value(t) {} 
  virtual ~Property() {} 
  void getter(std::function&lt;T(void)&gt; gttr) { getter_ = gttr; } 
  virtual operator const T() const { return getter_(); }    // getter 
  T getValue() { return value; }                            // used by custom getters 
protected: 
  T value; 
  std::function&lt;T()&gt; getter_ = [=]() { return value; };     // default gettter 
</pre>}; 
/*----&lt; overload insertion operator for std::string properties &gt;---*/ 
inline std::ostream& operator&lt;&lt;(std::ostream& out, Property&lt;const std::string&gt;& p) 
{<button onclick="myFunction(this)" id="button39">-</button><pre class="showElem" id="button39_pre"> 
  std::string temp = p; 
  try { 
    out &lt;&lt; (temp).c_str(); 
  } 
  catch (std::exception& ex) 
  { 
    std::cout &lt;&lt; "\n  exception:\n  " &lt;&lt; ex.what() &lt;&lt; "\n"; 
  } 
  return out; 
</pre>} 
</pre>
<script src="../JS/hideHandler.js"></script>
</body>
</html>