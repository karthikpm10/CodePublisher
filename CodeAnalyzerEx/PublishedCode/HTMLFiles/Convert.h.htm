<!----------------------------------------------------------------------------
   Convert.h.htm  -Published HTML File
   Published on : 2017-04-04.21:40:35
   Author:Karthik Palepally Muniyappa  
----------------------------------------------------------------------------->
<html>
<head>
<link rel="stylesheet" href="../CSS/style.css">
</head>
<body>
<h3>Convert.h</h3>
<hr />
<div class="indent">
<h4>Dependencies:</h4>
<ul>
<li><a href="Convert.cpp.htm">Convert.cpp</a></li>
</ul>
</div>
<hr />
<pre>
#pragma once 
///////////////////////////////////////////////////////////////////// 
// Convert.h - Demonstrate Template Syntax                         // 
//                                                                 // 
// Jim Fawcett, CSE687 - Object Oriented Design, Spring 2017       // 
///////////////////////////////////////////////////////////////////// 
/* 
 * - Template classes use one or more unspecified types, defined by 
 *   arguments in the template declaration: template&lt;typename T, ...&gt;. 
 * 
 * - Because the arguments are not specified, the C++ compiler cannot 
 *   generate object code until it sees an application instantiate 
 *   the template type(s). 
 * 
 * - The consequence of this is that all template definitions must be 
 *   placed in a header file, to be included by the application. 
 * 
 * - Unlike C# and Java, template syntax checking happens when the 
 *   application is compiled.   
 * 
 * - That means that a template class can use any methods for the  
 *   unspecified type and will successfully compile.  If the type does 
 *   not have a method used by the template code, a compile time error 
 *   occurs when the application is compiled. 
 */ 
#include &lt;sstream&gt; 
#include &lt;string&gt; 
///////////////////////////////////////////////////////////////////// 
// Convert&lt;T&gt; class 
// - (de)serializes objects of type T (from)to strings 
// - generates a type identifier using Run-Time Type Identification 
// 
template&lt;typename T&gt; 
class Convert 
{<button onclick="myFunction(this)" id="button10">-</button><pre class="showElem" id="button10_pre"> 
public: 
  virtual ~Convert&lt;T&gt;() {} 
  static std::string toString(const T& t); 
  static T fromString(const std::string& str); 
  static std::string id(const T& t); 
</pre>}; 
/*----&lt; serialize t to a std::string &gt;-----------------------------*/ 
/* 
 * Assumes that T defines an insertion operator. 
 */ 
template&lt;typename T&gt; 
inline std::string Convert&lt;T&gt;::toString(const T& t) 
{<button onclick="myFunction(this)" id="button12">-</button><pre class="showElem" id="button12_pre"> 
  std::ostringstream out; 
  out &lt;&lt; *const_cast&lt;T*&gt;(&t);   
  return out.str(); 
</pre>} 
/*----&lt; create an instance of T from a std::string &gt;---------------*/ 
/* 
 * Assumes that T defines an extraction operator. 
 * To succeed str must be created from Convert&lt;T&gt;::toString(const T& t).  
 */ 
template&lt;typename T&gt; 
inline T Convert&lt;T&gt;::fromString(const std::string& str) 
{<button onclick="myFunction(this)" id="button13">-</button><pre class="showElem" id="button13_pre"> 
  std::istringstream in(str); 
  T value; 
  in &gt;&gt; value;    // istringstream extraction provides the conversion 
  return value; 
</pre>} 
/*----&lt; create an id string from an instance of T using RTTI &gt;----*/ 
template&lt;typename T&gt; 
inline std::string Convert&lt;T&gt;::id(const T& t) 
{<button onclick="myFunction(this)" id="button14">-</button><pre class="showElem" id="button14_pre"> 
  return typeid(t).name(); 
</pre>} 
</pre>
<script src="../JS/hideHandler.js"></script>
</body>
</html>