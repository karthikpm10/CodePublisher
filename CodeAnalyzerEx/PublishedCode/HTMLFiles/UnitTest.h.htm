<!----------------------------------------------------------------------------
   UnitTest.h.htm  -Published HTML File
   Published on : 2017-04-04.21:40:36
   Author:Karthik Palepally Muniyappa  
----------------------------------------------------------------------------->
<html>
<head>
<link rel="stylesheet" href="../CSS/style.css">
</head>
<body>
<h3>UnitTest.h</h3>
<hr />
<div class="indent">
<h4>Dependencies:</h4>
<ul>
<li><a href="UnitTest.cpp.htm">UnitTest.cpp</a></li>
<li><a href="FileSystem.cpp.htm">FileSystem.cpp</a></li>
<li><a href="CopyOfUnitTest.h.htm">CopyOfUnitTest.h</a></li>
<li><a href="Utilities.h.htm">Utilities.h</a></li>
</ul>
</div>
<hr />
<pre>
#ifndef UNITTEST_H 
#define UNITTEST_H 
/////////////////////////////////////////////////////////////// 
// UnitTest.cpp - Demonstrate unit testing framework         // 
// ver 1.1                                                   // 
// --------------------------------------------------------- // 
// copyright © Jim Fawcett, 2012, 2013                       // 
// All rights granted provided that this notice is retained  // 
// --------------------------------------------------------- // 
// Jim Fawcett, CSE687-Object Oriented Design, Spring 2013   // 
/////////////////////////////////////////////////////////////// 
 
#include &lt;string&gt; 
#include &lt;iostream&gt; 
 
namespace Test 
{ 
  void Title(const std::string& title, char ch='=') 
  {<button onclick="myFunction(this)" id="button88">-</button><pre class="showElem" id="button88_pre"> 
    std::cout &lt;&lt; "\n  " &lt;&lt; title; 
    std::cout &lt;&lt; "\n " &lt;&lt; std::string(title.size() + 2, ch); 
</pre>  } 
 
  template &lt;typename T&gt; 
  class TestBase 
  {<button onclick="myFunction(this)" id="button89">-</button><pre class="showElem" id="button89_pre"> 
  public: 
 
    typedef bool (T::*Test) (); 
 
    virtual ~TestBase() {} 
 
    // Your test driver implements this for each major test 
    // - call a sequence of doTest(TestN)s 
    //----------------------------------------------------- 
    virtual bool test()=0; 
 
    // Executes test functions inside a try block 
    //------------------------------------------- 
    bool doTest(Test atest) <button onclick="myFunction(this)" id="button91">-</button><pre class="showElem" id="button91_pre"> 
    {  
      try 
      { 
        return (dynamic_cast&lt;T*&gt;(this)-&gt;*atest)(); 
      } 
      catch (std::exception& ex) 
      { 
        std::cout &lt;&lt; "\n  failed: " &lt;&lt; ex.what(); 
        return false; 
      } 
      catch(...) 
      { 
        std::cout &lt;&lt; "\n  failed: thrown structured exception"; 
        return false; 
      } 
</pre>    } 
    // Call this in your test functions to save duplicating output statements 
    //----------------------------------------------------------------------- 
    bool checkResult(bool predicate, std::string testname) 
    {<button onclick="myFunction(this)" id="button92">-</button><pre class="showElem" id="button92_pre"> 
      std::string name = std::string(typeid(*this).name()) + "::" + testname; 
      name = name.substr(6, name.size() - 6); 
      if(predicate) 
        return passed(name); 
      else 
        return failed(name); 
</pre>    } 
  protected: 
    bool passed(const std::string& name) 
    {<button onclick="myFunction(this)" id="button93">-</button><pre class="showElem" id="button93_pre"> 
      std::cout &lt;&lt; "\n  passed: " &lt;&lt; name; 
      return true; 
</pre>    } 
    bool failed(const std::string& name) 
    {<button onclick="myFunction(this)" id="button94">-</button><pre class="showElem" id="button94_pre"> 
      std::cout &lt;&lt; "\n  failed: " &lt;&lt; name; 
      return false; 
</pre>    } 
</pre>  }; 
} 
#endif 
</pre>
<script src="../JS/hideHandler.js"></script>
</body>
</html>