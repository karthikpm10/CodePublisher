<!----------------------------------------------------------------------------
   AbstrSynTree.h.htm  -Published HTML File
   Published on : 2017-04-04.21:40:35
   Author:Karthik Palepally Muniyappa  
----------------------------------------------------------------------------->
<html>
<head>
<link rel="stylesheet" href="../CSS/style.css">
</head>
<body>
<h3>AbstrSynTree.h</h3>
<hr />
<div class="indent">
<h4>Dependencies:</h4>
<ul>
<li><a href="AbstrSynTree.cpp.htm">AbstrSynTree.cpp</a></li>
<li><a href="itokcollection.h.htm">itokcollection.h</a></li>
<li><a href="itokcollection.h.htm">itokcollection.h</a></li>
<li><a href="FileSystem.h.htm">FileSystem.h</a></li>
<li><a href="GrammarHelpers.cpp.htm">GrammarHelpers.cpp</a></li>
<li><a href="ScopeStack.h.htm">ScopeStack.h</a></li>
</ul>
</div>
<hr />
<pre>
#pragma once 
///////////////////////////////////////////////////////////////////// 
//  AbstrSynTree.h - Represents an Abstract Syntax Tree            // 
//  ver 1.4                                                        // 
//  Language:      Visual C++ 2015                                 // 
//  Platform:      Dell XPS 8900, Windows 10                       // 
//  Application:   Used to support parsing source code             // 
//  Author:        Jim Fawcett, CST 4-187, Syracuse University     // 
//                 (315) 443-3948, jfawcett@twcny.rr.com           // 
///////////////////////////////////////////////////////////////////// 
/* 
  Package Operations: 
  ================== 
  This package defines an AbstrSynTree class and an ASTNode struct.   
  Those provides support for building Abstract Syntax Trees during  
  static source code analysis. 
 
  Public Interface: 
  ================= 
  AbstrSynTree ast(scopeStack);       // create instance, passing in ScopeStack 
  ASTNode* pNode = ast.root();        // get or set root of AST 
  ast.add(pNode);                     // add ASTNode to tree, linked to current scope 
  ASTNode* pNode = ast.find(myType);  // retrieve ptr to ASTNode representing myType 
  ast.pop();                          // close current scope by poping top of scopeStack 
 
  Build Process: 
  ============== 
  Required files 
  - AbstrSynTree.h, AbstrSynTree.cpp, Utilities.h, Utilities.cpp 
 
  Build commands (either one) 
  - devenv CodeAnalysis.sln 
  - cl /EHsc /DTEST_ABSTRSYNTREE AbstrSynTree.cpp Utilities.cpp /link setargv.obj 
 
  Maintenance History: 
  ==================== 
  ver 1.4 : 26 Feb 2017 
  - added parentType_ member to support better grammar analysis 
  ver 1.3 : 29 Oct 2016 
  - added throw in ScopeStack if pop or peek empty stack 
  ver 1.2 : 28 Oct 2016 
  - added test for interface in show() and Add(ASTNode*) 
  ver 1.1 : 22 Aug 2016 
  - added access type and declaration type enumerations 
  - added processing to store access level in AST 
  - added more prologue comments 
  ver 1.0 : 05 Aug 2016 
  - first release 
 
*/ 
 
#include &lt;string&gt; 
#include &lt;vector&gt; 
#include &lt;sstream&gt; 
#include &lt;unordered_map&gt; 
#include &lt;functional&gt; 
#include "../SemiExp/itokcollection.h" 
#include "../ScopeStack/ScopeStack.h" 
 
namespace CodeAnalysis 
{ 
  enum Access  
  {  
    publ, prot, priv  
  }; 
 
  enum DeclType  
  {  
    dataDecl, functionDecl, lambdaDecl, usingDecl  
  }; 
 
  struct DeclarationNode 
  { 
    Scanner::ITokCollection* pTc = nullptr; 
    Access access_; 
    DeclType declType_; 
    std::string package_; 
    size_t line_; 
  }; 
 
  struct ASTNode 
  { 
    using Type = std::string; 
    using Name = std::string; 
    using Package = std::string; 
    using Path = std::string; 
 
    ASTNode(); 
    ASTNode(const Type& type, const Name& name); 
    ~ASTNode(); 
    Type type_; 
    Type parentType_; 
    Name name_; 
    Package package_; 
    Path path_; 
    size_t startLineCount_; 
    size_t endLineCount_; 
    size_t complexity_; 
    std::vector&lt;ASTNode*&gt; children_; 
    std::vector&lt;DeclarationNode&gt; decl_; 
    std::vector&lt;Scanner::ITokCollection*&gt; statements_; 
    std::string show(bool details = false); 
  }; 
 
 
  class AbstrSynTree 
  {<button onclick="myFunction(this)" id="button2">-</button><pre class="showElem" id="button2_pre"> 
  public: 
    using ClassName = std::string; 
    using TypeMap = std::unordered_map&lt;ClassName, ASTNode*&gt;; 
 
    AbstrSynTree(ScopeStack&lt;ASTNode*&gt;& stack); 
    ~AbstrSynTree(); 
    ASTNode*& root(); 
    void add(ASTNode* pNode); 
    ASTNode* find(const ClassName& type); 
    ASTNode* pop(); 
    TypeMap& typeMap(); 
	ASTNode * findRecursively(const ClassName & type, ASTNode * node); 
  private: 
    TypeMap typeMap_; 
    ScopeStack&lt;ASTNode*&gt;& stack_; 
    ASTNode* pGlobalNamespace_; 
</pre>  }; 
  //----&lt; traverse AST and execute callobj on every node &gt;------------- 
 
  template &lt;typename CallObj&gt; 
  void ASTWalk(ASTNode* pItem, CallObj co) 
  {<button onclick="myFunction(this)" id="button3">-</button><pre class="showElem" id="button3_pre"> 
    static size_t indentLevel = 0; 
    co(pItem, indentLevel); 
    auto iter = pItem-&gt;children_.begin(); 
    ++indentLevel; 
    while (iter != pItem-&gt;children_.end()) 
    { 
      ASTWalk(*iter, co); 
      ++iter; 
    } 
    --indentLevel; 
</pre>  } 
  //----&lt; traverse AST and execute callobj on every node &gt;------------- 
 
  template &lt;typename CallObj&gt; 
  void ASTWalkNoIndent(ASTNode* pItem, CallObj co) 
  {<button onclick="myFunction(this)" id="button4">-</button><pre class="showElem" id="button4_pre"> 
    co(pItem); 
    auto iter = pItem-&gt;children_.begin(); 
    while (iter != pItem-&gt;children_.end()) 
    { 
      ASTWalkNoIndent(*iter, co); 
      ++iter; 
    } 
</pre>  } 
  //----&lt; compute complexities for each ASTNode &gt;-------------------- 
 
  inline void complexityWalk(ASTNode* pItem, size_t& count) 
  {<button onclick="myFunction(this)" id="button5">-</button><pre class="showElem" id="button5_pre"> 
    size_t inCount = ++count; 
    auto iter = pItem-&gt;children_.begin(); 
    while (iter != pItem-&gt;children_.end()) 
    { 
      complexityWalk(*iter, count); 
      ++iter; 
    } 
    pItem-&gt;complexity_ = count - inCount + 1; 
</pre>  } 
  //----&lt; compute complexities for each ASTNode &gt;-------------------- 
 
  inline void complexityEval(ASTNode* pNode) 
  {<button onclick="myFunction(this)" id="button6">-</button><pre class="showElem" id="button6_pre"> 
    size_t initialCount = 0; 
    complexityWalk(pNode, initialCount); 
</pre>  } 
} 
 
struct foobar { 
 
}; 
</pre>
<script src="../JS/hideHandler.js"></script>
</body>
</html>