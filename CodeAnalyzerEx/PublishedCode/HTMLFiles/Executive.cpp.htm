<!----------------------------------------------------------------------------
   Executive.cpp.htm  -Published HTML File
   Published on : 2017-04-04.21:40:40
   Author:Karthik Palepally Muniyappa  
----------------------------------------------------------------------------->
<html>
<head>
<link rel="stylesheet" href="../CSS/style.css">
</head>
<body>
<h3>Executive.cpp</h3>
<hr />
<div class="indent">
<h4>Dependencies:</h4>
<ul>
<li><a href="Logger.h.htm">Logger.h</a></li>
<li><a href="FileSystem.h.htm">FileSystem.h</a></li>
<li><a href="Executive.h.htm">Executive.h</a></li>
<li><a href="FileMgr.h.htm">FileMgr.h</a></li>
<li><a href="AbstrSynTree.h.htm">AbstrSynTree.h</a></li>
<li><a href="ActionsAndRules.h.htm">ActionsAndRules.h</a></li>
<li><a href="Tokenizer.h.htm">Tokenizer.h</a></li>
<li><a href="Tokenizer.h.htm">Tokenizer.h</a></li>
<li><a href="itokcollection.h.htm">itokcollection.h</a></li>
<li><a href="itokcollection.h.htm">itokcollection.h</a></li>
<li><a href="ScopeStack.cpp.htm">ScopeStack.cpp</a></li>
<li><a href="GrammarHelpers.cpp.htm">GrammarHelpers.cpp</a></li>
<li><a href="FileSystem.cpp.htm">FileSystem.cpp</a></li>
<li><a href="Typtable.h.htm">Typtable.h</a></li>
<li><a href="DependencyAnalysis.h.htm">DependencyAnalysis.h</a></li>
<li><a href="CodePublisher.h.htm">CodePublisher.h</a></li>
</ul>
</div>
<hr />
<pre>
///////////////////////////////////////////////////////////////////// 
// Executive.cpp - Directs Code Analysis                           // 
// ver 1.4                                                         // 
//-----------------------------------------------------------------// 
// Jim Fawcett (c) copyright 2016                                  // 
// All rights granted provided this copyright notice is retained   // 
//-----------------------------------------------------------------// 
// Language:    C++, Visual Studio 2015                            // 
// Platform:    Dell XPS 8900, Windows 10                          // 
// Application: Project #2, CSE687 - Object Oriented Design, S2015 // 
// Author:      Jim Fawcett, Syracuse University, CST 4-187        // 
//              jfawcett@twcny.rr.com                              // 
///////////////////////////////////////////////////////////////////// 
 
#include "Executive.h" 
#include &lt;sstream&gt; 
#include &lt;string&gt; 
#include &lt;vector&gt; 
#include &lt;map&gt; 
#include &lt;unordered_map&gt; 
#include &lt;functional&gt; 
#include &lt;algorithm&gt; 
#include &lt;exception&gt; 
#include &lt;iomanip&gt; 
#include &lt;chrono&gt; 
#include &lt;ctime&gt; 
 
#include "../Parser/Parser.h" 
#include "../FileSystem/FileSystem.h" 
#include "../FileMgr/FileMgr.h" 
#include "../Parser/ActionsAndRules.h" 
#include "../Parser/ConfigureParser.h" 
#include "../AbstractSyntaxTree/AbstrSynTree.h" 
#include "../Logger/Logger.h" 
#include "../Utilities/Utilities.h" 
#include "../TypeTable/Typtable.h" 
#include "../DependencyAnalyzer/DependencyAnalysis.h" 
#include "../Display/DisplayEx.h" 
#include "../CodePublisher/CodePublisher.h" 
 
using Rslt = Logging::StaticLogger&lt;0&gt;;  // use for application results 
using Demo = Logging::StaticLogger&lt;1&gt;;  // use for demonstrations of processing 
using Dbug = Logging::StaticLogger&lt;2&gt;;  // use for debug output 
 
 
///////////////////////////////////////////////////////////////////// 
// AnalFileMgr class 
// - Derives from FileMgr to make application specific file handler 
//   by overriding FileMgr::file(), FileMgr::dir(), and FileMgr::done() 
 
using Path = std::string; 
using File = std::string; 
using Files = std::vector&lt;File&gt;; 
using Pattern = std::string; 
using Ext = std::string; 
using FileMap = std::unordered_map&lt;Pattern, Files&gt;; 
 
using namespace CodeAnalysis; 
 
 
//----&lt; initialize application specific FileMgr &gt;-------------------- 
/* 
 * - Accepts CodeAnalysisExecutive's path and fileMap by reference 
 */ 
AnalFileMgr::AnalFileMgr(const Path& path, FileMap& fileMap) 
  : FileMgr(path), fileMap_(fileMap), numFiles_(0), numDirs_(0) {} 
 
//----&lt; override of FileMgr::file(...) to store found files &gt;------ 
 
void AnalFileMgr::file(const File& f) 
{<button onclick="myFunction(this)" id="button323">-</button><pre class="showElem" id="button323_pre"> 
  File fqf = d_ + "\\" + f; 
  Ext ext = FileSystem::Path::getExt(fqf); 
  Pattern p = "*." + ext; 
  fileMap_[p].push_back(fqf); 
  ++numFiles_; 
</pre>} 
//----&lt; override of FileMgr::dir(...) to save current dir &gt;---------- 
 
void AnalFileMgr::dir(const Dir& d) 
{<button onclick="myFunction(this)" id="button324">-</button><pre class="showElem" id="button324_pre"> 
  d_ = d; 
  ++numDirs_; 
</pre>} 
//----&lt; override of FileMgr::done(), not currently used &gt;------------ 
 
void AnalFileMgr::done() 
{ 
} 
//----&lt; returns number of matched files from search &gt;---------------- 
 
size_t AnalFileMgr::numFiles() 
{<button onclick="myFunction(this)" id="button326">-</button><pre class="showElem" id="button326_pre"> 
  return numFiles_; 
</pre>} 
//----&lt; returns number of dirs searched &gt;---------------------------- 
 
size_t AnalFileMgr::numDirs() 
{<button onclick="myFunction(this)" id="button327">-</button><pre class="showElem" id="button327_pre"> 
  return numDirs_; 
</pre>} 
 
///////////////////////////////////////////////////////////////////// 
// CodeAnalysisExecutive class 
// -  
using Path = std::string; 
using Pattern = std::string; 
using Patterns = std::vector&lt;Pattern&gt;; 
using File = std::string; 
using Files = std::vector&lt;File&gt;; 
using Ext = std::string; 
using FileMap = std::unordered_map&lt;Pattern, Files&gt;; 
using ASTNodes = std::vector&lt;ASTNode*&gt;; 
using FileToNodeCollection = std::vector&lt;std::pair&lt;File, ASTNode*&gt;&gt;; 
 
//----&lt; initialize parser, get access to repository &gt;---------------- 
 
CodeAnalysisExecutive::CodeAnalysisExecutive() 
{<button onclick="myFunction(this)" id="button328">-</button><pre class="showElem" id="button328_pre"> 
  pParser_ = configure_.Build(); 
  if (pParser_ == nullptr) 
  { 
    throw std::exception("couldn't create parser"); 
  } 
  pRepo_ = Repository::getInstance(); 
</pre>} 
//----&lt; cleanup &gt;---------------------------------------------------- 
 
CodeAnalysisExecutive::~CodeAnalysisExecutive() 
{<button onclick="myFunction(this)" id="button329">-</button><pre class="showElem" id="button329_pre"> 
  /* 
   *  Nothing to do: 
   *  - pParser_ and pRepo_ point to objects that the configure_ 
   *    destructor will delete. 
   *  - The AbstractSynTree object will cleanup its contents when 
   *    it goes out of scope by deleting the root of the AST node 
   *    tree.   
   *  - Each node deletes its children, so, again, nothing more  
   *    to do. 
   *  - This is here to present these comments and to make this 
   *    base destructor virtual. 
   */ 
</pre>} 
//----&lt; usage message &gt;---------------------------------------------- 
 
void showUsage() 
{<button onclick="myFunction(this)" id="button330">-</button><pre class="showElem" id="button330_pre"> 
  std::ostringstream out; 
  out &lt;&lt; "\n  Usage:"; 
  out &lt;&lt; "\n  Command Line Arguments are:"; 
  out &lt;&lt; "\n  - 1st: path to subdirectory containing files to analyze and Publish"; 
  out &lt;&lt; "\n  - remaining non-option arguments are file patterns, e.g., *.h and/or *.cpp, etc."; 
  out &lt;&lt; "\n  - must have at least one file pattern to specify what to process"; 
  out &lt;&lt; "\n  - option arguments have the format \"\"/x\" , where x is one of the options:"; 
  out &lt;&lt; "\n    - m : display function metrics"; 
  out &lt;&lt; "\n    - s : display file sizes"; 
  out &lt;&lt; "\n    - a : display Abstract Syntax Tree"; 
  out &lt;&lt; "\n    - r : set logger to display results"; 
  out &lt;&lt; "\n    - d : set logger to display demo outputs"; 
  out &lt;&lt; "\n    - b : set logger to display debug outputs"; 
  out &lt;&lt; "\n    - f : write all logs to logfile.txt"; 
  out &lt;&lt; "\n    - -DEPXMl ../../XMLInputFiles/dep.xml: store dependency table xml in file ../../XMLInputFiles/dep.xml"; 
 // out &lt;&lt; "\n    - -SCCXML ../../XMLInputFiles/scc.xml: store Strongly connected Components xml in file ../../XMLInputFiles/scc.xml"; 
  out &lt;&lt; "\n  A metrics summary is always shown, independent of any options used or not used"; 
  out &lt;&lt; "\n\n"; 
  std::cout &lt;&lt; out.str(); 
  //Rslt::write(out.str()); 
  //Rslt::flush(); 
</pre>} 
//----&lt; show command line arguments &gt;-------------------------------- 
 
 
void CodeAnalysisExecutive::showCommandLineArguments(int argc, char* argv[]) 
{<button onclick="myFunction(this)" id="button331">-</button><pre class="showElem" id="button331_pre"> 
  std::ostringstream out; 
  out &lt;&lt; "\n     Path: \"" &lt;&lt; FileSystem::Path::getFullFileSpec(argv[1]) &lt;&lt; "\"\n     Args: "; 
  for (int i = 2; i &lt; argc - 1; ++i) 
    out &lt;&lt; argv[i] &lt;&lt; ", "; 
  out &lt;&lt; argv[argc - 1]; 
  Rslt::write(out.str()); 
  Rslt::flush(); 
</pre>} 
//----&lt; handle command line arguments &gt;------------------------------ 
/* 
* Arguments are: 
* - path: possibly relative path to folder containing all analyzed code, 
*   e.g., may be anywhere in the directory tree rooted at that path 
* - patterns: one or more file patterns of the form *.h, *.cpp, and *.cs 
* - options: /m (show metrics), /s (show file sizes), and /a (show AST) 
*/ 
bool CodeAnalysisExecutive::ProcessCommandLine(int argc, char* argv[]) 
{<button onclick="myFunction(this)" id="button332">-</button><pre class="showElem" id="button332_pre"> 
	std::cout &lt;&lt; "\n***********************Requirement 8-Processing Command Line arguments for the following:**********************************\n"; 
	std::cout &lt;&lt; "\nPath to the directory tree containing files to publish\n"; 
	std::cout &lt;&lt; "\nList of file patterns to match for selection of files to publish\n"; 
	std::cout &lt;&lt; "Specification of the XML results file for dependency xml file(takes default if argument not specified\n"; 
	if (argc &lt; 2) 
  { 
    showUsage(); 
    return false; 
  } 
  try { 
    path_ = FileSystem::Path::getFullFileSpec(argv[1]); 
    if (!FileSystem::Directory::exists(path_)) 
    { 
      std::cout &lt;&lt; "\n\n  path \"" &lt;&lt; path_ &lt;&lt; "\" does not exist\n\n"; 
      return false; 
    } 
    for (int i = 2; i &lt; argc; ++i) 
    { 
		if (argv[i][0] == '/') 
			options_.push_back(argv[i][1]); 
		else if (argv[i][0] == '*') 
			patterns_.push_back(argv[i]); 
		else if (strcmp(argv[i],"-DEPXMl") == 0) 
			depxmlName = argv[i + 1]; 
		else if (strcmp(argv[i],"-SCCXML") == 0) 
			SCCxmlName = argv[i + 1]; 
    } 
    if (patterns_.size() == 0) 
    { 
      showUsage(); 
      return false; 
    } 
  } 
  catch (std::exception& ex) 
  { 
    std::cout &lt;&lt; "\n\n  command line argument parsing error:"; 
    std::cout &lt;&lt; "\n  " &lt;&lt; ex.what() &lt;&lt; "\n\n"; 
    return false; 
  } 
  return true; 
</pre>} 
//----&lt; returns path entered on command line &gt;------------------- 
 
std::string CodeAnalysisExecutive::getAnalysisPath() 
{<button onclick="myFunction(this)" id="button333">-</button><pre class="showElem" id="button333_pre"> 
  return path_; 
</pre>} 
//----&lt; returns reference to FileMap &gt;--------------------------- 
/* 
 * Supports quickly finding all the files found with a give pattern 
 */ 
FileMap& CodeAnalysisExecutive::getFileMap() 
{<button onclick="myFunction(this)" id="button334">-</button><pre class="showElem" id="button334_pre"> 
  return fileMap_; 
</pre>} 
//----&lt; searches path for files matching specified patterns &gt;---- 
/* 
 * - Searches entire diretory tree rooted at path_, evaluated  
 *   from a command line argument. 
 * - Saves found files in FileMap. 
 */ 
void CodeAnalysisExecutive::getSourceFiles() 
{<button onclick="myFunction(this)" id="button335">-</button><pre class="showElem" id="button335_pre"> 
  AnalFileMgr fm(path_, fileMap_); 
  for (auto patt : patterns_) 
    fm.addPattern(patt); 
  fm.search(); 
  numFiles_ = fm.numFiles(); 
  numDirs_ = fm.numDirs(); 
</pre>} 
//----&lt; helper: is text a substring of str? &gt;-------------------- 
 
bool contains(const std::string& str, const std::string& text) 
{<button onclick="myFunction(this)" id="button336">-</button><pre class="showElem" id="button336_pre"> 
  if (str.find(text) &lt; str.length()) 
    return true; 
  return false; 
</pre>} 
//----&lt; retrieve from fileMap all files matching *.h &gt;----------- 
 
std::vector&lt;File&gt;& CodeAnalysisExecutive::cppHeaderFiles() 
{<button onclick="myFunction(this)" id="button337">-</button><pre class="showElem" id="button337_pre"> 
  cppHeaderFiles_.clear(); 
  for (auto item : fileMap_) 
  { 
    if (contains(item.first, "*.h")) 
    { 
      for (auto file : item.second) 
        cppHeaderFiles_.push_back(file); 
    } 
  } 
  return cppHeaderFiles_; 
</pre>} 
//----&lt; retrieve from fileMap all files matching *.cpp &gt;--------- 
 
std::vector&lt;File&gt;& CodeAnalysisExecutive::cppImplemFiles() 
{<button onclick="myFunction(this)" id="button338">-</button><pre class="showElem" id="button338_pre"> 
  cppImplemFiles_.clear(); 
  for (auto item : fileMap_) 
  { 
    if (contains(item.first, "*.cpp")) 
    { 
      for (auto file : item.second) 
        cppImplemFiles_.push_back(file); 
    } 
  } 
  return cppImplemFiles_; 
</pre>} 
//----&lt; retrieve from fileMap all files matching *.cs &gt;---------- 
 
std::vector&lt;File&gt;& CodeAnalysisExecutive::csharpFiles() 
{<button onclick="myFunction(this)" id="button339">-</button><pre class="showElem" id="button339_pre"> 
  csharpFiles_.clear(); 
  for (auto item : fileMap_) 
  { 
    if (contains(item.first, "*.cs")) 
    { 
      for (auto file : item.second) 
        csharpFiles_.push_back(file); 
    } 
  } 
  return csharpFiles_; 
</pre>} 
//----&lt; report number of Source Lines Of Code (SLOCs) &gt;---------- 
 
CodeAnalysisExecutive::Slocs CodeAnalysisExecutive::fileSLOCs(const File& file) <button onclick="myFunction(this)" id="button340">-</button><pre class="showElem" id="button340_pre"> 
{  
  return slocMap_[file]; 
</pre>} 
//----&lt; report number of files processed &gt;----------------------- 
 
size_t CodeAnalysisExecutive::numFiles() 
{<button onclick="myFunction(this)" id="button341">-</button><pre class="showElem" id="button341_pre"> 
  return numFiles_; 
</pre>} 
//----&lt; report number of directories searched &gt;------------------ 
 
size_t CodeAnalysisExecutive::numDirs() 
{<button onclick="myFunction(this)" id="button342">-</button><pre class="showElem" id="button342_pre"> 
  return numDirs_; 
</pre>} 
//----&lt; show processing activity &gt;------------------------------- 
 
void CodeAnalysisExecutive::showActivity(const File& file) 
{<button onclick="myFunction(this)" id="button343">-</button><pre class="showElem" id="button343_pre"> 
  std::function&lt;std::string(std::string, size_t)&gt; trunc = [](std::string in, size_t count) 
  { 
    return in.substr(0, count); 
  }; 
 
  if (Rslt::running()) 
  { 
    std::cout &lt;&lt; std::left &lt;&lt; "\r     Processing file: " &lt;&lt; std::setw(80) &lt;&lt; trunc(file, 80); 
  } 
</pre>} 
 
void CodeAnalysisExecutive::clearActivity() 
{<button onclick="myFunction(this)" id="button345">-</button><pre class="showElem" id="button345_pre"> 
  if (Rslt::running()) 
  { 
    std::cout &lt;&lt; std::left &lt;&lt; "\r                      " &lt;&lt; std::setw(80) &lt;&lt; std::string(80,' '); 
  } 
</pre>} 
//----&lt; parses code and saves results in AbstrSynTree &gt;-------------- 
/* 
* - Processes C++ header files first to build AST with nodes for 
*   all public classes and structs. 
* - Then processes C++ implementation files.  Each member function 
*   is relocated to its class scope node, not the local scope. 
* - Therefore, this ordering is important. 
* - C# code has all member functions inline, so we don't need to 
*   do any relocation of nodes in the AST.  Therefore, that analysis 
*   can be done at any time. 
* - If you bore down into the analysis code in ActionsAndRules.h you 
*   will find some gymnastics to handle template syntax.  That can 
*   get somewhat complicated, so there may be some latent bugs there. 
*   I don't know of any at this time. 
*/ 
void CodeAnalysisExecutive::setLanguage(const File& file) 
{<button onclick="myFunction(this)" id="button346">-</button><pre class="showElem" id="button346_pre"> 
  std::string ext = FileSystem::Path::getExt(file); 
  if (ext == "h" || ext == "cpp") 
    pRepo_-&gt;language() = Language::Cpp; 
  else if (ext == "cs") 
    pRepo_-&gt;language() = Language::CSharp; 
</pre>} 
 
void CodeAnalysisExecutive::processSourceCode(bool showProc) 
{<button onclick="myFunction(this)" id="button347">-</button><pre class="showElem" id="button347_pre"> 
  for (auto file : cppHeaderFiles()) 
  { 
    if (showProc) 
      showActivity(file); 
    pRepo_-&gt;package() = FileSystem::Path::getName(file); 
 
    if (!configure_.Attach(file)) 
    { 
      std::ostringstream out; 
      out &lt;&lt; "\n  could not open file " &lt;&lt; file &lt;&lt; "\n"; 
      Rslt::write(out.str()); 
      Rslt::flush(); 
      continue; 
    } 
    // parse file 
    Rslt::flush(); 
    Demo::flush(); 
    Dbug::flush(); 
 
    if(!Rslt::running()) 
      Demo::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\""); 
    if(!Demo::running() && !Rslt::running()) 
      Dbug::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\""); 
    pRepo_-&gt;language() = Language::Cpp; 
    pRepo_-&gt;currentPath() = file; 
    while (pParser_-&gt;next()) 
    { 
      pParser_-&gt;parse(); 
    } 
 
    Slocs slocs = pRepo_-&gt;Toker()-&gt;currentLineCount(); 
    slocMap_[pRepo_-&gt;package()] = slocs; 
  } 
  for (auto file : cppImplemFiles()) 
  { 
    if (showProc) 
      showActivity(file); 
    pRepo_-&gt;package() = FileSystem::Path::getName(file); 
 
    if (!configure_.Attach(file)) 
    { 
      std::ostringstream out; 
      out &lt;&lt; "\n  could not open file " &lt;&lt; file &lt;&lt; "\n"; 
      Rslt::write(out.str()); 
      Rslt::flush(); 
      continue; 
    } 
    // parse file 
 
    if (!Rslt::running()) 
      Demo::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\""); 
    if (!Demo::running() && !Rslt::running()) 
      Dbug::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\""); 
    pRepo_-&gt;language() = Language::Cpp; 
    pRepo_-&gt;currentPath() = file; 
    while (pParser_-&gt;next()) 
      pParser_-&gt;parse(); 
 
    Slocs slocs = pRepo_-&gt;Toker()-&gt;currentLineCount(); 
    slocMap_[pRepo_-&gt;package()] = slocs; 
  } 
  for (auto file : csharpFiles()) 
  { 
    if (showProc) 
      showActivity(file); 
    pRepo_-&gt;package() = FileSystem::Path::getName(file); 
 
    if (!configure_.Attach(file)) 
    { 
      std::ostringstream out; 
      out &lt;&lt; "\n  could not open file " &lt;&lt; file &lt;&lt; "\n"; 
      Rslt::write(out.str()); 
      continue; 
    } 
    // parse file 
 
    if (!Rslt::running()) 
      Demo::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\""); 
    if (!Demo::running() && !Rslt::running()) 
      Dbug::write("\n\n  opening file \"" + pRepo_-&gt;package() + "\""); 
    pRepo_-&gt;language() = Language::CSharp; 
    pRepo_-&gt;currentPath() = file; 
    while (pParser_-&gt;next()) 
      pParser_-&gt;parse(); 
 
    Slocs slocs = pRepo_-&gt;Toker()-&gt;currentLineCount(); 
    slocMap_[pRepo_-&gt;package()] = slocs; 
  } 
  if (showProc) 
    clearActivity(); 
  std::ostringstream out; 
  out &lt;&lt; std::left &lt;&lt; "\r  " &lt;&lt; std::setw(77) &lt;&lt; " "; 
  Rslt::write(out.str()); 
 
  //displayAST(); 
</pre>} 
//----&lt; evaluate complexities of each AST node &gt;--------------------- 
 
void CodeAnalysisExecutive::complexityAnalysis() 
{<button onclick="myFunction(this)" id="button348">-</button><pre class="showElem" id="button348_pre"> 
  ASTNode* pGlobalScope = pRepo_-&gt;getGlobalScope(); 
  CodeAnalysis::complexityEval(pGlobalScope); 
</pre>} 
//----&lt; comparison functor for sorting FileToNodeCollection &gt;---- 
/* 
* - supports stable sort on extension values 
* - displayMetrics(...) uses to organize metrics display 
*/ 
struct CompExts 
{ 
  bool operator()(const std::pair&lt;File, ASTNode*&gt;& first, const std::pair&lt;File, ASTNode*&gt;& second) 
  {<button onclick="myFunction(this)" id="button349">-</button><pre class="showElem" id="button349_pre"> 
    return FileSystem::Path::getExt(first.first) &gt; FileSystem::Path::getExt(second.first); 
</pre>  } 
}; 
//----&lt; comparison functor for sorting FileToNodeCollection &gt;---- 
/* 
* - supports stable sort on name values 
* - displayMetrics(...) uses these functions to organize metrics display 
*/ 
static void removeExt(std::string& name) 
{<button onclick="myFunction(this)" id="button350">-</button><pre class="showElem" id="button350_pre"> 
  size_t extStartIndex = name.find_last_of('.'); 
  name = name.substr(0, extStartIndex); 
</pre>} 
 
struct CompNames 
{ 
  bool operator()(const std::pair&lt;File, ASTNode*&gt;& first, const std::pair&lt;File, ASTNode*&gt;& second) 
  {<button onclick="myFunction(this)" id="button351">-</button><pre class="showElem" id="button351_pre"> 
    std::string fnm = FileSystem::Path::getName(first.first); 
    removeExt(fnm); 
    std::string snm = FileSystem::Path::getName(second.first); 
    removeExt(snm); 
    return fnm &lt; snm; 
</pre>  } 
}; 
//----&lt; display header line for displayMmetrics() &gt;------------------ 
 
void CodeAnalysisExecutive::displayHeader() 
{<button onclick="myFunction(this)" id="button352">-</button><pre class="showElem" id="button352_pre"> 
  std::ostringstream out; 
  out &lt;&lt; std::right; 
  out &lt;&lt; "\n "; 
  out &lt;&lt; std::setw(25) &lt;&lt; "file name"; 
  out &lt;&lt; std::setw(12) &lt;&lt; "type"; 
  out &lt;&lt; std::setw(35) &lt;&lt; "name"; 
  out &lt;&lt; std::setw(8) &lt;&lt; "line"; 
  out &lt;&lt; std::setw(8) &lt;&lt; "size"; 
  out &lt;&lt; std::setw(8) &lt;&lt; "cplx"; 
  out &lt;&lt; std::right; 
  out &lt;&lt; "\n  "; 
  out &lt;&lt; std::setw(25) &lt;&lt; "-----------------------"; 
  out &lt;&lt; std::setw(12) &lt;&lt; "----------"; 
  out &lt;&lt; std::setw(35) &lt;&lt; "---------------------------------"; 
  out &lt;&lt; std::setw(8) &lt;&lt; "------"; 
  out &lt;&lt; std::setw(8) &lt;&lt; "------"; 
  out &lt;&lt; std::setw(8) &lt;&lt; "------"; 
  Rslt::write(out.str()); 
</pre>} 
//----&lt; display single line for displayMetrics() &gt;------------------- 
 
void CodeAnalysisExecutive::displayMetricsLine(const File& file, ASTNode* pNode) 
{<button onclick="myFunction(this)" id="button353">-</button><pre class="showElem" id="button353_pre"> 
  std::function&lt;std::string(std::string, size_t)&gt; trunc = [](std::string in, size_t count) 
  { 
    return in.substr(0, count); 
  }; 
  std::ostringstream out; 
  out &lt;&lt; std::right; 
  out &lt;&lt; "\n "; 
  out &lt;&lt; std::setw(25) &lt;&lt; trunc(file, 23); 
  out &lt;&lt; std::setw(12) &lt;&lt; pNode-&gt;type_; 
  out &lt;&lt; std::setw(35) &lt;&lt; trunc(pNode-&gt;name_, 33); 
  out &lt;&lt; std::setw(8) &lt;&lt; pNode-&gt;startLineCount_; 
  out &lt;&lt; std::setw(8) &lt;&lt; pNode-&gt;endLineCount_ - pNode-&gt;startLineCount_ + 1; 
  size_t debug1 = pNode-&gt;startLineCount_; 
  size_t debug2 = pNode-&gt;endLineCount_; 
  out &lt;&lt; std::setw(8) &lt;&lt; pNode-&gt;complexity_; 
  Rslt::write(out.str()); 
</pre>} 
//----&lt; display lines containing public data declaration &gt;----------- 
 
std::string CodeAnalysisExecutive::showData(const Scanner::ITokCollection* pTc) 
{<button onclick="myFunction(this)" id="button355">-</button><pre class="showElem" id="button355_pre"> 
  std::string semiExpStr; 
  for (size_t i=0; i&lt;pTc-&gt;length(); ++i) 
    semiExpStr += (*pTc)[i] + " "; 
  return semiExpStr; 
</pre>} 
std::vector&lt;std::string&gt; CodeAnalysis::CodeAnalysisExecutive::getFiles() 
{<button onclick="myFunction(this)" id="button356">-</button><pre class="showElem" id="button356_pre"> 
	std::vector&lt;std::string&gt; files; 
	std::vector&lt;std::string&gt;::iterator it; 
	for (it = patterns_.begin(); it &lt; patterns_.end(); it++) { 
		for (auto item : fileMap_) 
		{ 
			if (contains(item.first, *it)) 
			{ 
				for (auto file : item.second) 
					files.push_back(file); 
			} 
		} 
	} 
	return files; 
</pre>} 
void CodeAnalysisExecutive::displayDataLines(ASTNode* pNode, bool isSummary) 
{<button onclick="myFunction(this)" id="button357">-</button><pre class="showElem" id="button357_pre"> 
  for (auto datum : pNode-&gt;decl_) 
  { 
    if (pNode-&gt;parentType_ == "namespace" || pNode-&gt;parentType_ == "class" || pNode-&gt;parentType_ == "struct") 
    { 
      if (pNode-&gt;type_ == "function" || pNode-&gt;parentType_ == "function") 
        continue; 
      if (datum.access_ == Access::publ && datum.declType_ == DeclType::dataDecl) 
      { 
        std::ostringstream out; 
        out &lt;&lt; std::right; 
        out &lt;&lt; "\n "; 
        out &lt;&lt; std::setw(25) &lt;&lt; "public data:" &lt;&lt; " "; 
        if (isSummary) 
        { 
          out &lt;&lt; datum.package_ &lt;&lt; " : " &lt;&lt; datum.line_ &lt;&lt; " - " 
            &lt;&lt; pNode-&gt;type_ &lt;&lt; " " &lt;&lt; pNode-&gt;name_ &lt;&lt; "\n " &lt;&lt; std::setw(15) &lt;&lt; " "; 
        } 
        out &lt;&lt; showData(datum.pTc); 
        Rslt::write(out.str()); 
      } 
    } 
  } 
</pre>} 
//----&lt;  helper for displayMetrics() &gt;------------------------------- 
/* 
* - Breaking this out as a separate function allows application to 
*   display metrics for a subset of the Abstract Syntax Tree 
*/ 
void CodeAnalysisExecutive::displayMetrics(ASTNode* root) 
{<button onclick="myFunction(this)" id="button358">-</button><pre class="showElem" id="button358_pre"> 
  flushLogger(); 
  std::ostringstream out; 
  out &lt;&lt; "Code Metrics - Start Line, Size (lines/code), and Complexity (number of scopes)"; 
  Utils::sTitle(out.str(), 3, 92, out, '='); 
  out &lt;&lt; "\n"; 
  Rslt::write(out.str()); 
 
  std::function&lt;void(ASTNode* pNode)&gt; co = [&](ASTNode* pNode) {<button onclick="myFunction(this)" id="button359">-</button><pre class="showElem" id="button359_pre"> 
    if ( 
      pNode-&gt;type_ == "namespace" || 
      pNode-&gt;type_ == "function" || 
      pNode-&gt;type_ == "class" || 
      pNode-&gt;type_ == "interface" || 
      pNode-&gt;type_ == "struct" || 
      pNode-&gt;type_ == "lambda" 
      ) 
</pre>      fileNodes_.push_back(std::pair&lt;File, ASTNode*&gt;(pNode-&gt;package_, pNode)); 
  }; 
  ASTWalkNoIndent(root, co); 
  std::stable_sort(fileNodes_.begin(), fileNodes_.end(), CompExts()); 
  std::stable_sort(fileNodes_.begin(), fileNodes_.end(), CompNames()); 
 
  displayHeader(); 
 
  std::string prevFile; 
  for (auto item : fileNodes_) 
  { 
    if (item.first != prevFile) 
    { 
      Rslt::write("\n"); 
      displayHeader(); 
    } 
    displayMetricsLine(item.first, item.second); 
    displayDataLines(item.second); 
    prevFile = item.first; 
  } 
  Rslt::write("\n"); 
</pre>} 
//----&lt; display metrics results of code analysis &gt;--------------- 
 
void CodeAnalysisExecutive::displayMetrics() 
{<button onclick="myFunction(this)" id="button360">-</button><pre class="showElem" id="button360_pre"> 
  ASTNode* pGlobalScope = pRepo_-&gt;getGlobalScope(); 
  displayMetrics(pGlobalScope); 
</pre>} 
//----&lt; walk tree of element nodes &gt;--------------------------------- 
 
template&lt;typename element&gt; 
void TreeWalk(element* pItem, bool details = false) 
{<button onclick="myFunction(this)" id="button361">-</button><pre class="showElem" id="button361_pre"> 
  static std::string path; 
  if (path != pItem-&gt;path_ && details == true) 
  { 
    path = pItem-&gt;path_; 
    Rslt::write("\n" + path); 
  } 
  static size_t indentLevel = 0; 
  std::ostringstream out; 
  out &lt;&lt; "\n  " &lt;&lt; std::string(2 * indentLevel, ' ') &lt;&lt; pItem-&gt;show(); 
  Rslt::write(out.str()); 
  auto iter = pItem-&gt;children_.begin(); 
  ++indentLevel; 
  while (iter != pItem-&gt;children_.end()) 
  { 
    TreeWalk(*iter); 
    ++iter; 
  } 
  --indentLevel; 
</pre>} 
//----&lt; display the AbstrSynTree build in processSourceCode() &gt;------ 
 
void CodeAnalysisExecutive::displayAST() 
{<button onclick="myFunction(this)" id="button362">-</button><pre class="showElem" id="button362_pre"> 
  flushLogger(); 
  ASTNode* pGlobalScope = pRepo_-&gt;getGlobalScope(); 
  Utils::title("Abstract Syntax Tree"); 
  TreeWalk(pGlobalScope); 
  Rslt::write("\n"); 
</pre>} 
//----&lt; show functions with metrics exceeding specified limits &gt;----- 
 
void CodeAnalysisExecutive::displayMetricSummary(size_t sMax, size_t cMax) 
{<button onclick="myFunction(this)" id="button363">-</button><pre class="showElem" id="button363_pre"> 
  flushLogger(); 
  std::ostringstream out; 
  Utils::sTitle("Functions Exceeding Metric Limits and Public Data", 3, 92, out, '='); 
  Rslt::write(out.str()); 
  displayHeader(); 
 
  if (fileNodes_.size() == 0)  // only build fileNodes_ if displayMetrics hasn't been called 
  { 
    std::function&lt;void(ASTNode* pNode)&gt; co = [&](ASTNode* pNode) { 
      fileNodes_.push_back(std::pair&lt;File, ASTNode*&gt;(pNode-&gt;package_, pNode)); 
    }; 
    ASTNode* pGlobalNamespace = pRepo_-&gt;getGlobalScope(); 
    ASTWalkNoIndent(pGlobalNamespace, co); 
    std::stable_sort(fileNodes_.begin(), fileNodes_.end(), CompExts()); 
    std::stable_sort(fileNodes_.begin(), fileNodes_.end(), CompNames()); 
  } 
  for (auto item : fileNodes_) 
  { 
    if (item.second-&gt;type_ == "function") 
    { 
      size_t size = item.second-&gt;endLineCount_ - item.second-&gt;startLineCount_ + 1; 
      size_t cmpl = item.second-&gt;complexity_; 
      if (size &gt; sMax || cmpl &gt; cMax) 
        displayMetricsLine(item.first, item.second); 
    } 
  } 
  Rslt::write("\n"); 
  for (auto item : fileNodes_) 
  { 
    displayDataLines(item.second, true); 
  } 
  Rslt::write("\n"); 
</pre>} 
//----&lt; comparison functor for sorting SLOC display &gt;---------------- 
 
struct compFiles 
{ 
private: 
  std::string ChangeFirstCharOfExt(const std::string& fileName) const 
  {<button onclick="myFunction(this)" id="button365">-</button><pre class="showElem" id="button365_pre"> 
    std::string temp = fileName; 
    size_t pos = temp.find_last_of('.'); 
    if (pos &lt; temp.size() - 1) 
      if (temp[pos + 1] == 'h') 
        temp[pos + 1] = 'a'; 
    return temp; 
</pre>  } 
public: 
  bool operator()(const std::string& fileName1, const std::string& fileName2) const 
  {<button onclick="myFunction(this)" id="button366">-</button><pre class="showElem" id="button366_pre"> 
    return ChangeFirstCharOfExt(fileName1) &lt; ChangeFirstCharOfExt(fileName2); 
</pre>  } 
}; 
//----&lt; show sizes of all the files processed &gt;---------------------- 
 
void CodeAnalysisExecutive::displaySlocs() 
{<button onclick="myFunction(this)" id="button367">-</button><pre class="showElem" id="button367_pre"> 
  flushLogger(); 
  Utils::sTitle("File Size - Source Lines of Code", 3, 92); 
  size_t slocCount = 0; 
  std::map&lt;std::string, size_t, compFiles&gt; fileColl; 
  for (auto item : fileMap_) 
  { 
    for (auto file : item.second) 
    { 
      File fileName = FileSystem::Path::getName(file); 
      fileColl[file] = slocMap_[fileName]; 
    } 
  } 
  for (auto fitem : fileColl) 
  { 
    std::ostringstream out; 
    out &lt;&lt; "\n  " &lt;&lt; std::setw(8) &lt;&lt; fitem.second &lt;&lt; " : " &lt;&lt; fitem.first; 
    Rslt::write(out.str()); 
    slocCount += fitem.second; 
  } 
  std::ostringstream out; 
  out &lt;&lt; "\n\n      Total line count = " &lt;&lt; slocCount &lt;&lt; "\n"; 
  Rslt::write(out.str()); 
  Rslt::write("\n"); 
</pre>} 
//----&lt; display analysis info based on command line options &gt;-------- 
 
void CodeAnalysisExecutive::dispatchOptionalDisplays() 
{<button onclick="myFunction(this)" id="button368">-</button><pre class="showElem" id="button368_pre"> 
  for (auto opt : options_) 
  { 
    switch (opt) 
    { 
    case 'm': 
      displayMetrics(); 
      Rslt::start(); 
      break; 
    case 'a': 
      displayAST(); 
      Rslt::start(); 
      break; 
    case 's': 
      displaySlocs(); 
      Rslt::start(); 
      break; 
    default: 
      break; 
    } 
  } 
</pre>} 
//----&lt; display analysis info based on command line options &gt;-------- 
 
void CodeAnalysisExecutive::setDisplayModes() 
{<button onclick="myFunction(this)" id="button369">-</button><pre class="showElem" id="button369_pre"> 
  for (auto opt : options_) 
  { 
    switch (opt) 
    { 
    case 'r': 
      Rslt::start(); 
      break; 
    case 'd': 
      Demo::start(); 
      break; 
    case 'b': 
      Dbug::start(); 
      break; 
    case 'f': 
      setLogFile("logFile.txt"); 
      break; 
    default: 
      if (opt != 'a' && opt != 'b' && opt != 'd' && opt != 'f' && opt != 'm' && opt != 'r' && opt != 's') 
      { 
        std::cout &lt;&lt; "\n\n  unknown option " &lt;&lt; opt &lt;&lt; "\n\n"; 
      } 
    } 
  } 
</pre>} 
//----&lt; helper functions for managing application's logging &gt;-------- 
 
void CodeAnalysisExecutive::startLogger(std::ostream& out) 
{<button onclick="myFunction(this)" id="button370">-</button><pre class="showElem" id="button370_pre"> 
  Rslt::attach(&out); 
  Demo::attach(&out); 
  Dbug::attach(&out); 
 
  // will start Demo and Dbug if  have options /d and /b 
 
  setDisplayModes(); 
</pre>} 
 
void CodeAnalysisExecutive::flushLogger() 
{<button onclick="myFunction(this)" id="button371">-</button><pre class="showElem" id="button371_pre"> 
  Rslt::flush(); 
  Demo::flush(); 
  Dbug::flush(); 
</pre>} 
 
void CodeAnalysisExecutive::stopLogger() 
{<button onclick="myFunction(this)" id="button372">-</button><pre class="showElem" id="button372_pre"> 
  Rslt::flush(); 
  Demo::flush(); 
  Dbug::flush(); 
  Rslt::stop(); 
  Demo::stop(); 
  Dbug::stop(); 
</pre>} 
//----&lt; open file stream for logging &gt;------------------------------- 
/* 
*  - must come after CodeAnalysisExecutive::processCommandLine() 
*  - must come before starting any of the loggers 
*/ 
void CodeAnalysisExecutive::setLogFile(const File& file) 
{<button onclick="myFunction(this)" id="button373">-</button><pre class="showElem" id="button373_pre"> 
  std::string path = getAnalysisPath(); 
  path += "\\" + file; 
  pLogStrm_ = new std::ofstream(path); 
  if (pLogStrm_-&gt;good()) 
  { 
    Rslt::attach(pLogStrm_); 
    Demo::attach(pLogStrm_); 
    Dbug::attach(pLogStrm_); 
  } 
  else 
    Rslt::write("\n  couldn't open logFile.txt for writing"); 
</pre>} 
 
std::string CodeAnalysis::CodeAnalysisExecutive::getDepXMLName() 
{<button onclick="myFunction(this)" id="button374">-</button><pre class="showElem" id="button374_pre"> 
	return depxmlName; 
</pre>} 
 
std::string CodeAnalysis::CodeAnalysisExecutive::getSCCXMLName() 
{<button onclick="myFunction(this)" id="button375">-</button><pre class="showElem" id="button375_pre"> 
	return SCCxmlName; 
</pre>} 
 
//------&lt; Get all the files in the specified directory &gt;----------- 
 
 
 
std::string CodeAnalysisExecutive::systemTime()<button onclick="myFunction(this)" id="button376">-</button><pre class="showElem" id="button376_pre"> 
{  
  time_t sysTime = time(&sysTime); 
  char buffer[27]; 
  ctime_s(buffer, 27, &sysTime); 
  buffer[24] = '\0'; 
  std::string temp(buffer); 
  return temp; 
</pre>} 
//----&lt; conduct code analysis &gt;-------------------------------------- 
 
#include &lt;fstream&gt; 
 
int main(int argc, char* argv[]) 
{<button onclick="myFunction(this)" id="button377">-</button><pre class="showElem" id="button377_pre"> 
  using namespace CodeAnalysis; 
 
  CodeAnalysisExecutive exec; 
  std::cout &lt;&lt; "\n***********************Requirement 10-Running automated test suite to demonstrate requirements**********************************\n"; 
  std::cout &lt;&lt; "\n***********************Requirement 9- Demonstrating CodePublisher functionality by publishing all the important packages in Project #3.**********************************\n"; 
   
  showUsage(); 
  try { 
    bool succeeded = exec.ProcessCommandLine(argc, argv); 
    if (!succeeded) 
    { 
      return 1; 
    } 
    exec.setDisplayModes(); 
    exec.startLogger(std::cout); 
 
    std::ostringstream tOut("CodeAnalysis - Version 1.4"); 
    Utils::sTitle(tOut.str(), 3, 92, tOut, '='); 
    Rslt::write(tOut.str()); 
 
    //Rslt::write("\n     " + exec.getAnalysisPath()); 
    Rslt::write("\n     " + exec.systemTime()); 
    Rslt::flush(); 
    exec.showCommandLineArguments(argc, argv); 
    Rslt::write("\n"); 
 
    exec.getSourceFiles(); 
    exec.processSourceCode(true); 
    exec.complexityAnalysis(); 
    exec.dispatchOptionalDisplays(); 
    exec.flushLogger(); 
    exec.displayMetricSummary(50,10); 
 
    exec.flushLogger(); 
    Rslt::write("\n"); 
    std::ostringstream out; 
    out &lt;&lt; "\n  " &lt;&lt; std::setw(10) &lt;&lt; "searched" &lt;&lt; std::setw(6) &lt;&lt; exec.numDirs() &lt;&lt; " dirs"; 
    out &lt;&lt; "\n  " &lt;&lt; std::setw(10) &lt;&lt; "processed" &lt;&lt; std::setw(6) &lt;&lt; exec.numFiles() &lt;&lt; " files"; 
    Rslt::write(out.str()); 
    Rslt::write("\n"); 
    exec.stopLogger(); 
	//type analysis object created 
	TypeTable tb; 
	tb.doTypeAnal(); 
	//dependency table object 
	DependencyTable dp(exec.getDepXMLName()); 
	std::cout &lt;&lt; "\n*************************************Building Dependency Table******************************************\n"; 
	std::cout &lt;&lt; "\n*************************************Processing******************************************\n"; 
	dp.buildDependencyTable(exec.getFiles(), tb); 
	//CodePublisher object 
	CodePublisher publisher(dp, tb.getButtonMap()); 
	publisher.publishFiles(exec.getFiles()); 
	//Disp objdisp; 
	//objdisp.showTypeTable(tb); 
	//objdisp.showDepTable(dp); 
	//objdisp.showStronglyCC(sc); 
	//sc.showSCC(); 
	 
  } 
  catch (std::exception& except) 
  { 
    exec.flushLogger(); 
    std::cout &lt;&lt; "\n\n  caught exception in Executive::main: " + std::string(except.what()) + "\n\n"; 
    exec.stopLogger(); 
    return 1; 
  } 
  std::cout &lt;&lt; "Enter a key to exit"; 
  getchar(); 
 
   
</pre>  return 0; 
} 
</pre>
<script src="../JS/hideHandler.js"></script>
</body>
</html>