<!----------------------------------------------------------------------------
   FileMgr.h.htm  -Published HTML File
   Published on : 2017-04-04.21:40:35
   Author:Karthik Palepally Muniyappa  
----------------------------------------------------------------------------->
<html>
<head>
<link rel="stylesheet" href="../CSS/style.css">
</head>
<body>
<h3>FileMgr.h</h3>
<hr />
<div class="indent">
<h4>Dependencies:</h4>
<ul>
<li><a href="FileMgr.cpp.htm">FileMgr.cpp</a></li>
<li><a href="IFileMgr.h.htm">IFileMgr.h</a></li>
<li><a href="FileSystem.h.htm">FileSystem.h</a></li>
</ul>
</div>
<hr />
<pre>
#ifndef FILEMGR_H 
#define FILEMGR_H 
///////////////////////////////////////////////////////////////////// 
// FileMgr.h - find files matching specified patterns              // 
//             on a specified path                                 // 
// ver 2.2                                                         // 
// Jim Fawcett, CSE687 - Object Oriented Design, Spring 2016       // 
///////////////////////////////////////////////////////////////////// 
/* 
* Package Operations: 
* ------------------- 
* This package provides a class, FileMgr, and object factory function, 
* Create().  It's mission is to search the directory tree, rooted at 
* a specified path, looking for files that match a set of specified 
* patterns. 
* 
* It provides virtual functions file(...), dir(...), and done(), which 
* an application can override to provide application specific processing 
* for the events: file found, directory found, and finished processing. 
* 
* The package also provides interface hooks that serve the same purpose 
* but allow multiple receivers for those events. 
* 
* Required Files: 
* --------------- 
*   FileMgr.h, FileMgr.cpp, IFileMgr.h,  
*   FileSystem.h, FileSystem.cpp 
* 
* Build Process: 
* -------------- 
*   devenv FileMgr.sln /rebuild debug 
* 
* Maintenance History: 
* -------------------- 
* ver 2.2 : 28 Aug 2016 
* - added more prologue comments 
* ver 2.1 : 31 Jul 2016 
* - added virtual file, dir, and done functions 
* - this lets application override instead of registering for event 
* ver 2.0 : 12 Mar 2016 
* - fixes bug in directory recursion in find(path) 
* - reduces scope of for loop in find for efficiency 
* ver 1.0 : 11 Mar 2016 
* - first release 
*/ 
 
#include "IFileMgr.h" 
#include "../FileSystem/FileSystem.h" 
 
namespace FileManager 
{ 
  class FileMgr : public IFileMgr 
  {<button onclick="myFunction(this)" id="button59">-</button><pre class="showElem" id="button59_pre"> 
  public: 
    using patterns = std::vector&lt;std::string&gt;; 
    using File = std::string; 
    using Dir = std::string; 
    using fileSubscribers = std::vector&lt;IFileEventHandler*&gt;; 
    using dirSubscribers = std::vector&lt;IDirEventHandler*&gt;; 
    using doneSubscribers = std::vector&lt;IDoneEventHandler*&gt;; 
 
    virtual ~FileMgr() {} 
 
    //----&lt; set default file pattern &gt;------------------------------- 
 
    FileMgr(const std::string& path) : path_(path) 
    {<button onclick="myFunction(this)" id="button61">-</button><pre class="showElem" id="button61_pre"> 
      patterns_.push_back("*.*"); 
      pInstance_ = this; 
</pre>    } 
    //----&lt; return instance of FileMgr &gt;----------------------------- 
 
    static IFileMgr* getInstance() 
    {<button onclick="myFunction(this)" id="button62">-</button><pre class="showElem" id="button62_pre"> 
      return pInstance_; 
</pre>    } 
    //----&lt; add file pattern, removing default on first call &gt;------- 
 
    void addPattern(const std::string& patt) 
    {<button onclick="myFunction(this)" id="button63">-</button><pre class="showElem" id="button63_pre"> 
      if (patterns_.size() == 1 && patterns_[0] == "*.*") 
        patterns_.pop_back(); 
      patterns_.push_back(patt); 
</pre>    } 
    //----&lt; applications can overload this or reg for fileEvt &gt;------ 
 
    virtual void file(const File& f) 
    {<button onclick="myFunction(this)" id="button64">-</button><pre class="showElem" id="button64_pre"> 
      ++numFilesProcessed; 
      for (auto pEvtHandler : fileSubscribers_) 
      { 
        pEvtHandler-&gt;execute(f); 
      } 
</pre>    } 
    //----&lt; applications can overload this or reg for dirEvt &gt;------- 
 
    virtual void dir(const Dir& fpath) 
    {<button onclick="myFunction(this)" id="button65">-</button><pre class="showElem" id="button65_pre"> 
      for (auto pEvtHandler : dirSubscribers_) 
      { 
        pEvtHandler-&gt;execute(fpath); 
      } 
</pre>    } 
    //----&lt; applications can overload this or reg for doneEvt &gt;------ 
 
    virtual void done() 
    {<button onclick="myFunction(this)" id="button66">-</button><pre class="showElem" id="button66_pre"> 
      for (auto pEvtHandler : doneSubscribers_) 
      { 
        pEvtHandler-&gt;execute(numFilesProcessed); 
      } 
</pre>    } 
    //----&lt; start search on previously specified path &gt;-------------- 
 
    void search() 
    {<button onclick="myFunction(this)" id="button67">-</button><pre class="showElem" id="button67_pre"> 
      find(path_); 
      done(); 
</pre>    } 
    //----&lt; search current path including subdirectories &gt;----------- 
 
    void find(const std::string& path) 
    {<button onclick="myFunction(this)" id="button68">-</button><pre class="showElem" id="button68_pre"> 
      std::string fpath = FileSystem::Path::getFullFileSpec(path); 
      dir(fpath); 
      for (auto patt : patterns_) 
      { 
        std::vector&lt;std::string&gt; files = FileSystem::Directory::getFiles(fpath, patt); 
        for (auto f : files) 
        { 
          file(f); 
        } 
      } 
      std::vector&lt;std::string&gt; dirs = FileSystem::Directory::getDirectories(fpath); 
      for (auto d : dirs) 
      { 
        if (d == "." || d == "..") 
          continue; 
        std::string dpath = fpath + "\\" + d; 
        find(dpath); 
      } 
</pre>    } 
    //----&lt; applications use this to register for notification &gt;----- 
 
    void regForFiles(IFileEventHandler* pHandler) 
    {<button onclick="myFunction(this)" id="button69">-</button><pre class="showElem" id="button69_pre"> 
      fileSubscribers_.push_back(pHandler); 
</pre>    } 
    //----&lt; applications use this to register for notification &gt;----- 
 
    void regForDirs(IDirEventHandler* pHandler) 
    {<button onclick="myFunction(this)" id="button70">-</button><pre class="showElem" id="button70_pre"> 
      dirSubscribers_.push_back(pHandler); 
</pre>    } 
    //----&lt; applications use this to register for notification &gt;----- 
 
    void regForDone(IDoneEventHandler* pHandler) 
    {<button onclick="myFunction(this)" id="button71">-</button><pre class="showElem" id="button71_pre"> 
      doneSubscribers_.push_back(pHandler); 
</pre>    } 
  private: 
    std::string path_; 
    patterns patterns_; 
    size_t numFilesProcessed = 0; 
    fileSubscribers fileSubscribers_; 
    dirSubscribers dirSubscribers_; 
    doneSubscribers doneSubscribers_; 
    static IFileMgr* pInstance_; 
</pre>  }; 
 
  inline IFileMgr* FileMgrFactory::create(const std::string& path) 
  {<button onclick="myFunction(this)" id="button72">-</button><pre class="showElem" id="button72_pre"> 
    return new FileMgr(path); 
</pre>  } 
} 
#endif 
</pre>
<script src="../JS/hideHandler.js"></script>
</body>
</html>