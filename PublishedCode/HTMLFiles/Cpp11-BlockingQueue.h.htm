<!----------------------------------------------------------------------------
   Cpp11-BlockingQueue.h.htm  -Published HTML File
   Published on : 2017-04-04.21:42:44
   Author:Karthik Palepally Muniyappa  
----------------------------------------------------------------------------->
<html>
<head>
<link rel="stylesheet" href="../CSS/style.css">
</head>
<body>
<h3>Cpp11-BlockingQueue.h</h3>
<hr />
<div class="indent">
<h4>Dependencies:</h4>
<ul>
<li><a href="Cpp11-BlockingQueue.cpp.htm">Cpp11-BlockingQueue.cpp</a></li>
</ul>
</div>
<hr />
<pre>
#ifndef CPP11_BLOCKINGQUEUE_H 
#define CPP11_BLOCKINGQUEUE_H 
/////////////////////////////////////////////////////////////// 
// Cpp11-BlockingQueue.h - Thread-safe Blocking Queue        // 
// ver 1.4                                                   // 
// Jim Fawcett, CSE687 - Object Oriented Design, Spring 2015 // 
/////////////////////////////////////////////////////////////// 
/* 
 * Package Operations: 
 * ------------------- 
 * This package contains one thread-safe class: BlockingQueue&lt;T&gt;. 
 * Its purpose is to support sending messages between threads. 
 * It is implemented using C++11 threading constructs including  
 * std::condition_variable and std::mutex.  The underlying storage 
 * is provided by the non-thread-safe std::queue&lt;T&gt;. 
 * 
 * Required Files: 
 * --------------- 
 * Cpp11-BlockingQueue.h 
 * 
 * Build Process: 
 * -------------- 
 * devenv Cpp11-BlockingQueue.sln /rebuild debug 
 * 
 * Maintenance History: 
 * -------------------- 
 * ver 1.4 : 29 Jul 2016 
 * - wrapped with namespace Async 
 * ver 1.3 : 04 Mar 2016 
 * - changed behavior of front() to throw exception 
 *   on empty queue. 
 * - added comment about std::unique_lock in deQ() 
 * ver 1.2 : 27 Feb 2016 
 * - added front(); 
 * - added move ctor and move assignment 
 * - deleted copy ctor and copy assignment 
 * ver 1.1 : 26 Jan 2015 
 * - added copy constructor and assignment operator 
 * ver 1.0 : 03 Mar 2014 
 * - first release 
 * 
 */ 
 
#include &lt;condition_variable&gt; 
#include &lt;mutex&gt; 
#include &lt;thread&gt; 
#include &lt;queue&gt; 
#include &lt;string&gt; 
#include &lt;iostream&gt; 
#include &lt;sstream&gt; 
 
namespace Async 
{ 
  template &lt;typename T&gt; 
  class BlockingQueue {<button onclick="myFunction(this)" id="button15">-</button><pre class="showElem" id="button15_pre"> 
  public: 
    BlockingQueue() {} 
    BlockingQueue(BlockingQueue&lt;T&gt;&& bq); 
    BlockingQueue&lt;T&gt;& operator=(BlockingQueue&lt;T&gt;&& bq); 
    BlockingQueue(const BlockingQueue&lt;T&gt;&) = delete; 
    BlockingQueue&lt;T&gt;& operator=(const BlockingQueue&lt;T&gt;&) = delete; 
    T deQ(); 
    void enQ(const T& t); 
    T& front(); 
    void clear(); 
    size_t size(); 
  private: 
    std::queue&lt;T&gt; q_; 
    std::mutex mtx_; 
    std::condition_variable cv_; 
</pre>  }; 
  //----&lt; move constructor &gt;--------------------------------------------- 
 
  template&lt;typename T&gt; 
  BlockingQueue&lt;T&gt;::BlockingQueue(BlockingQueue&lt;T&gt;&& bq) // need to lock so can't initialize 
  {<button onclick="myFunction(this)" id="button17">-</button><pre class="showElem" id="button17_pre"> 
    std::lock_guard&lt;std::mutex&gt; l(mtx_); 
    q_ = bq.q_; 
    while (bq.q_.size() &gt; 0)  // clear bq 
      bq.q_.pop(); 
    /* can't copy  or move mutex or condition variable, so use default members */ 
</pre>  } 
  //----&lt; move assignment &gt;---------------------------------------------- 
 
  template&lt;typename T&gt; 
  BlockingQueue&lt;T&gt;& BlockingQueue&lt;T&gt;::operator=(BlockingQueue&lt;T&gt;&& bq) 
  {<button onclick="myFunction(this)" id="button18">-</button><pre class="showElem" id="button18_pre"> 
    if (this == &bq) return *this; 
    std::lock_guard&lt;std::mutex&gt; l(mtx_); 
    q_ = bq.q_; 
    while (bq.q_.size() &gt; 0)  // clear bq 
      bq.q_.pop(); 
    /* can't move assign mutex or condition variable so use target's */ 
    return *this; 
</pre>  } 
  //----&lt; remove element from front of queue &gt;--------------------------- 
 
  template&lt;typename T&gt; 
  T BlockingQueue&lt;T&gt;::deQ() 
  {<button onclick="myFunction(this)" id="button19">-</button><pre class="showElem" id="button19_pre"> 
    std::unique_lock&lt;std::mutex&gt; l(mtx_); 
    /* 
       This lock type is required for use with condition variables. 
       The operating system needs to lock and unlock the mutex: 
       - when wait is called, below, the OS suspends waiting thread 
         and releases lock. 
       - when notify is called in enQ() the OS relocks the mutex, 
         resumes the waiting thread and sets the condition variable to 
         signaled state. 
       std::lock_quard does not have public lock and unlock functions. 
     */ 
    if (q_.size() &gt; 0) 
    { 
      T temp = q_.front(); 
      q_.pop(); 
      return temp; 
    } 
    // may have spurious returns so loop on !condition 
 
    while (q_.size() == 0) 
      cv_.wait(l, [this]() { return q_.size() &gt; 0; }); 
    T temp = q_.front(); 
    q_.pop(); 
    return temp; 
</pre>  } 
  //----&lt; push element onto back of queue &gt;------------------------------ 
 
  template&lt;typename T&gt; 
  void BlockingQueue&lt;T&gt;::enQ(const T& t) 
  {<button onclick="myFunction(this)" id="button20">-</button><pre class="showElem" id="button20_pre"> 
    { 
      std::unique_lock&lt;std::mutex&gt; l(mtx_); 
      q_.push(t); 
    } 
    cv_.notify_one(); 
</pre>  } 
  //----&lt; peek at next item to be popped &gt;------------------------------- 
 
  template &lt;typename T&gt; 
  T& BlockingQueue&lt;T&gt;::front() 
  {<button onclick="myFunction(this)" id="button21">-</button><pre class="showElem" id="button21_pre"> 
    std::lock_guard&lt;std::mutex&gt; l(mtx_); 
    if (q_.size() &gt; 0) 
      return q_.front(); 
    throw std::exception("attempt to deQue empty queue"); 
</pre>  } 
  //----&lt; remove all elements from queue &gt;------------------------------- 
 
  template &lt;typename T&gt; 
  void BlockingQueue&lt;T&gt;::clear() 
  {<button onclick="myFunction(this)" id="button22">-</button><pre class="showElem" id="button22_pre"> 
    std::lock_guard&lt;std::mutex&gt; l(mtx_); 
    while (q_.size() &gt; 0) 
      q_.pop(); 
</pre>  } 
  //----&lt; return number of elements in queue &gt;--------------------------- 
 
  template&lt;typename T&gt; 
  size_t BlockingQueue&lt;T&gt;::size() 
  {<button onclick="myFunction(this)" id="button23">-</button><pre class="showElem" id="button23_pre"> 
    std::lock_guard&lt;std::mutex&gt; l(mtx_); 
    return q_.size(); 
</pre>  } 
} 
#endif 
</pre>
<script src="../JS/hideHandler.js"></script>
</body>
</html>