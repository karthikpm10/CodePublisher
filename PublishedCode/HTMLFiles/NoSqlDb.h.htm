<!----------------------------------------------------------------------------
   NoSqlDb.h.htm  -Published HTML File
   Published on : 2017-04-04.21:42:45
   Author:Karthik Palepally Muniyappa  
----------------------------------------------------------------------------->
<html>
<head>
<link rel="stylesheet" href="../CSS/style.css">
</head>
<body>
<h3>NoSqlDb.h</h3>
<hr />
<div class="indent">
<h4>Dependencies:</h4>
<ul>
<li><a href="NoSqlDb.cpp.htm">NoSqlDb.cpp</a></li>
<li><a href="CppProperties.h.htm">CppProperties.h</a></li>
<li><a href="GrammarHelpers.cpp.htm">GrammarHelpers.cpp</a></li>
<li><a href="XmlElement.h.htm">XmlElement.h</a></li>
<li><a href="FileSystem.h.htm">FileSystem.h</a></li>
<li><a href="XmlDocument.h.htm">XmlDocument.h</a></li>
<li><a href="ScopeStack.cpp.htm">ScopeStack.cpp</a></li>
<li><a href="Convert.h.htm">Convert.h</a></li>
<li><a href="CodePublisher.cpp.htm">CodePublisher.cpp</a></li>
</ul>
</div>
<hr />
<pre>
#pragma once 
///////////////////////////////////////////////////////////////////// 
// NoSqlDb.h - key/value pair in-memory database                   // 
//                                                                 // 
// Jim Fawcett, CSE687 - Object Oriented Design, Spring 2017       //  
//Karthik Palepally Muniyappa, Modified CSE687                     // 
///////////////////////////////////////////////////////////////////// 
/* 
Module Operations: 
================== 
This module defines an Element Class and a NoSqlDb class 
Element class defines the structure of the valu for the inmemory database, 
NoSqlDb class defines functions to: 
store an element in the memory map 
delete an element in the memory map 
update an element for an existing key 
show the element of a key 
show the contents of the unordered map 
persist the contents of the db to an xml file 
load the db from the xml file 
Public Interface: 
================= 
using Key = std::string; 
using Keys = std::vector&lt;Key&gt;; 
Keys keys(); 
bool save(Key key, Element&lt;Data&gt; elem);//insert element into db 
bool removeElement(Key key);//remove element from db 
bool updateElement(Key key, Element&lt;Data&gt; elem);//update existing element in db 
Element&lt;Data&gt; value(Key key);//get the element for a specified key 
std::string DBtoXmlStr(std::string xmlfpath);//persist db to xml file 
void DBfromXmlStr(std::string xml);//load db from xml file 
time_t DateTimeFromString(const char* buff);//convert string to time_t object 
std::string DateTimeToString(time_t t);//convert time_t to string 
size_t count();//get the size of the unordered map 
bool writeTofile(std::string content, std::string fName);// write ccontents to a file 
std::string readFromFile(std::string fName);//read contenets from a file 
bool setPersistCounter(int persistCount);//set the counter after which the db should be persisted to an xml file 
bool setxmlFilePath(std::string xmlPath);//set the xml file path 
* Required Files: 
* --------------- 
*   - XmlElement.h, XmlElement.cpp 
**   - CppProperties.h, CppProperties.cpp 
*   - XmlDocument.h, XmlDocument.cpp 
*   - Convert.h 
* Build Process: 
* -------------- 
*   devenv NoSqlDb.sln /debug rebuild 
* 
* Maintenance History: 
* -------------------- 
ver 0.1 : 2nd Feb 2017 
* 
/* 
 * - fixed bug in NoSqlDb::count() by replacing 
 *   unordered_map&lt;key,Value&gt;::count() with 
 *   unordered_map&lt;key,Value&gt;::size(); 
 */ 
#include &lt;unordered_map&gt; 
#include &lt;string&gt; 
#include &lt;sstream&gt; 
#include &lt;vector&gt; 
#include &lt;iomanip&gt; 
#include &lt;iostream&gt; 
#include &lt;fstream&gt; 
#include &lt;time.h&gt; 
#include "../CppProperties/CppProperties.h" 
#include "../XmlDocument/XmlDocument/XmlDocument.h" 
#include "../XmlDocument/XmlElement/XmlElement.h" 
#include "../Convert/Convert.h" 
 ///////////////////////////////////////////////////////////////////// 
 // Element class represents a data record in our NoSql database 
 // - in our NoSql database that is just the value in a key/value pair 
 // - it needs to store child data, something for you to implement 
 // 
template&lt;typename Data&gt; 
class Element 
{<button onclick="myFunction(this)" id="button110">-</button><pre class="showElem" id="button110_pre"> 
public: 
	using Name = std::string; 
	using Category = std::string; 
	using Description = std::string; 
	using TimeDate = std::time_t; 
	using Children = std::vector&lt;std::string&gt;; 
	//using Parent = std::string; 
	Property&lt;Name&gt; name;            // metadata 
	Property&lt;Category&gt; category;    // metadata 
	Property&lt;Description&gt; description; //metadata 
	Property&lt;TimeDate&gt; timeDate;    // metadata 
	Property&lt;Children&gt; children;    //metadata 
	//Property&lt;Parent&gt; parent;        //metadata 
	Property&lt;Data&gt; data;            // data 
	std::string show(); 
</pre>}; 
template&lt;typename Data&gt; 
std::string Element&lt;Data&gt;::show() 
{<button onclick="myFunction(this)" id="button111">-</button><pre class="showElem" id="button111_pre"> 
	// show children when you've implemented them 
	std::ostringstream out; 
	out.setf(std::ios::adjustfield, std::ios::left); 
	out &lt;&lt; "\n    " &lt;&lt; std::setw(8) &lt;&lt; "name" &lt;&lt; " : " &lt;&lt; name; 
	out &lt;&lt; "\n    " &lt;&lt; std::setw(8) &lt;&lt; "category" &lt;&lt; " : " &lt;&lt; category; 
	out &lt;&lt; "\n    " &lt;&lt; std::setw(8) &lt;&lt; "timeDate" &lt;&lt; " : " &lt;&lt; timeDate; 
	out &lt;&lt; "\n    " &lt;&lt; std::setw(8) &lt;&lt; "Description" &lt;&lt; " : " &lt;&lt; description; 
	std::vector&lt;std::string&gt; Childrens = children; 
	for (std::string child : Childrens) 
	{ 
		out &lt;&lt; "\n    " &lt;&lt; std::setw(8) &lt;&lt; "Childrens" &lt;&lt; " : " &lt;&lt; child; 
	} 
	out &lt;&lt; "\n    " &lt;&lt; std::setw(8) &lt;&lt; "data" &lt;&lt; " : " &lt;&lt; data; 
	out &lt;&lt; "\n"; 
	return out.str(); 
</pre>} 
///////////////////////////////////////////////////////////////////// 
// NoSqlDb class is a key/value pair in-memory database 
// - stores and retrieves elements 
// - you will need to add query capability 
//   That should probably be another class that uses NoSqlDb 
// 
using namespace XmlProcessing; 
using SPtr = std::shared_ptr&lt;AbstractXmlElement&gt;; 
template&lt;typename Data&gt; 
class NoSqlDb 
{<button onclick="myFunction(this)" id="button112">-</button><pre class="showElem" id="button112_pre"> 
public: 
	using Key = std::string; 
	using Keys = std::vector&lt;Key&gt;; 
	Keys keys(); 
	bool save(Key key, Element&lt;Data&gt; elem); 
	bool removeElement(Key key); 
	bool updateElement(Key key, Element&lt;Data&gt; elem); 
	Element&lt;Data&gt; value(Key key); 
	std::string DBtoXmlStr(std::string xmlfpath); 
	void DBfromXmlStr(std::string xml); 
	time_t DateTimeFromString(const char* buff); 
	std::string DateTimeToString(time_t t); 
	size_t count(); 
	bool writeTofile(std::string content, std::string fName); 
	std::string readFromFile(std::string fName); 
	bool setPersistCounter(int persistCount); 
	bool setxmlFilePath(std::string xmlPath); 
	NoSqlDb() 
	{<button onclick="myFunction(this)" id="button113">-</button><pre class="showElem" id="button113_pre"> 
		/*std::cout &lt;&lt; "\n*******************************Requirement 2: Instantiating template class NoSqlDb*************************\n"; 
		std::cout &lt;&lt; "\nwith values as name,category,description,timedate,children relationship vector and a data field****************\n";*/ 
</pre>	} 
	~NoSqlDb() 
	{<button onclick="myFunction(this)" id="button114">-</button><pre class="showElem" id="button114_pre"> 
		//persisting db to xml file 
		 
		//std::cout &lt;&lt; "\n*************************Requirement 6:Pesrsisting db contents from the destructor of NoSqlDb class as the db object went out of scope******************************\n"; 
		cout &lt;&lt; "\n****************************Dependency Table Stored in " &lt;&lt; FileSystem::Path::getFullFileSpec(xmlFpath) &lt;&lt; " *************************************\n"; 
		std::string xml = DBtoXmlStr(xmlFpath); 
</pre>	} 
private: 
	using Item = std::pair&lt;Key, Element&lt;Data&gt;&gt;; 
	int writeCounter; 
	int persistLimit = 50; 
	std::string xmlFpath; 
	std::unordered_map&lt;Key, Element&lt;Data&gt;&gt; store; 
</pre>}; 
//returns the keys of the unordered_map 
template&lt;typename Data&gt; 
typename NoSqlDb&lt;Data&gt;::Keys NoSqlDb&lt;Data&gt;::keys() 
{<button onclick="myFunction(this)" id="button115">-</button><pre class="showElem" id="button115_pre"> 
	Keys keys; 
	try 
	{ 
		for (Item item : store) 
		{ 
			keys.push_back(item.first); 
		} 
	} 
	catch (std::exception& ex) 
	{ 
		std::cout &lt;&lt; "Exception " &lt;&lt; ex.what(); 
	} 
	return keys; 
</pre>} 
//saves the key with element into the unordered map 
template&lt;typename Data&gt; 
bool NoSqlDb&lt;Data&gt;::save(Key key, Element&lt;Data&gt; elem) 
{<button onclick="myFunction(this)" id="button116">-</button><pre class="showElem" id="button116_pre"> 
	try 
	{ 
		/*time_t currentTime; 
		elem.timeDate =time(&currentTime);*/ 
		if (store.find(key) != store.end()) 
		{ 
			return false; 
		} 
		store[key] = elem; 
		writeCounter++; 
		//checking if the db has to be persisted to an xml file 
		if (writeCounter &gt; persistLimit) 
		{ 
			//std::cout &lt;&lt; "\n*************************Requirement 6: Pesrsisting db contents as the number of writes exceeded the limit set******************************\n"; 
			writeCounter = 0; 
			//writing contents of db to xml file 
			DBtoXmlStr(xmlFpath); 
		} 
	} 
	catch (std::exception& ex) 
	{ 
		std::cout &lt;&lt; "Exception " &lt;&lt; ex.what(); 
		return false; 
	} 
	return true; 
</pre>} 
//removes the key from the unordered map 
template&lt;typename Data&gt; 
bool NoSqlDb&lt;Data&gt;::removeElement(Key key) 
{<button onclick="myFunction(this)" id="button117">-</button><pre class="showElem" id="button117_pre"> 
	try 
	{//check if the key exists 
		if (store.find(key) != store.end()) 
		{ 
			store.erase(key); 
			return true; 
		} 
	} 
	catch (std::exception& ex) 
	{ 
		std::cout &lt;&lt; "Exception " &lt;&lt; ex.what(); 
		return false; 
	} 
	return false; 
</pre>} 
//updates a key with a new element in the unordered map 
template&lt;typename Data&gt; 
bool NoSqlDb&lt;Data&gt;::updateElement(Key key, Element&lt;Data&gt; elem) 
{<button onclick="myFunction(this)" id="button118">-</button><pre class="showElem" id="button118_pre"> 
	try 
	{ 
		//check if the key exists 
		if (store.find(key) != store.end()) 
		{ 
			store[key] = elem; 
			return true; 
		} 
	} 
	catch (std::exception& ex) 
	{ 
		std::cout &lt;&lt; "Exception " &lt;&lt; ex.what(); 
		return false; 
	} 
	return false; 
</pre>} 
// returns the value of the key from the map 
template&lt;typename Data&gt; 
Element&lt;Data&gt; NoSqlDb&lt;Data&gt;::value(Key key) 
{<button onclick="myFunction(this)" id="button119">-</button><pre class="showElem" id="button119_pre"> 
	try 
	{ 
		if (store.find(key) != store.end()) 
			return store[key]; 
	} 
	catch (std::exception& ex) 
	{ 
		std::cout &lt;&lt; "Exception " &lt;&lt; ex.what(); 
	} 
	return Element&lt;Data&gt;(); 
</pre>} 
//persists the contents of the db to an xml file specified by xmlpath 
template&lt;typename Data&gt; 
std::string NoSqlDb&lt;Data&gt;::DBtoXmlStr(std::string xmlpath)<button onclick="myFunction(this)" id="button120">-</button><pre class="showElem" id="button120_pre"> 
{  
	std::string xml; 
	try 
	{ 
		std::cout &lt;&lt; "\n************************* Writing the db to xml file******************************\n"; 
		XmlDocument doc; 
		SPtr pRoot = makeTaggedElement("DB"); 
		doc.docElement() = pRoot; 
		std::vector&lt;std::string&gt; ke = keys(); 
		for (std::string key : ke) 
		{ 
			Element&lt;Data&gt; element = value(key); 
			SPtr pElem = makeTaggedElement("Element"); 
			pElem-&gt;addAttrib("Key", key); 
			pElem-&gt;addAttrib("name", element.name); 
			pElem-&gt;addAttrib("category", element.category); 
			pElem-&gt;addAttrib("description", element.description); 
			//pElem-&gt;addAttrib("parent", element.parent); 
			pElem-&gt;addAttrib("timeDate", DateTimeToString(element.timeDate)); 
			SPtr pDataElem = makeTaggedElement("Data"); 
			SPtr pDataTextElem = makeTextElement(Convert&lt;Data&gt;::toString(element.data)); 
			pDataElem-&gt;addChild(pDataTextElem); 
			//adding data to element 
			pElem-&gt;addChild(pDataElem); 
			SPtr pChildrenElem = makeTaggedElement("Children"); 
			std::vector&lt;std::string&gt; childrens = element.children; 
			//iterating over children vector 
			for (std::string child : childrens) 
			{ 
				SPtr pChildElem = makeTaggedElement("Child"); 
				SPtr pchildTextElem = makeTextElement(child); 
				pChildElem-&gt;addChild(pchildTextElem); 
				pChildrenElem-&gt;addChild(pChildElem); 
			} 
			pElem-&gt;addChild(pChildrenElem); 
			pRoot-&gt;addChild(pElem); 
		} 
		xml = doc.toString(); 
		//std::cout &lt;&lt; "\n************************* Dependency xml file******************************\n" &lt;&lt; "\n" &lt;&lt; xml &lt;&lt; "\n"; 
		writeTofile(xml, xmlpath); 
		return xml; 
	} 
	catch (std::exception& ex) 
	{ 
		std::cout &lt;&lt; "Exception " &lt;&lt; ex.what(); 
	} 
	return xml; 
</pre>} 
//loading the db from the xml file 
template&lt;typename Data&gt; 
void NoSqlDb&lt;Data&gt;::DBfromXmlStr(std::string xmlFpath) 
{<button onclick="myFunction(this)" id="button121">-</button><pre class="showElem" id="button121_pre"> 
	try 
	{ 
		//std::cout &lt;&lt; "\n*************************Requirement 5: Loading the db from xml file******************************\n"; 
		std::string xml = readFromFile(xmlFpath); 
		XmlDocument doc(xml, XmlDocument::str); 
		std::vector&lt;SPtr&gt; elements = doc.descendents("Element").select(); 
		for (SPtr ele : elements) 
		{ 
			Element&lt;Data&gt; element; 
			std::string k = ele-&gt;getAttrib("Key"); 
			element.category = ele-&gt;getAttrib("category"); 
			element.description = ele-&gt;getAttrib("description"); 
			element.name = ele-&gt;getAttrib("name"); 
			// element.parent = ele-&gt;getAttrib("parent"); 
			element.timeDate = DateTimeFromString(ele-&gt;getAttrib("timeDate").c_str()); 
			std::string dn = ele-&gt;children()[0]-&gt;children()[0]-&gt;value(); 
			element.data = Convert&lt;Data&gt;::fromString(ele-&gt;children()[0]-&gt;children()[0]-&gt;value()); 
			std::vector&lt;std::string&gt; childrenVector; 
			std::vector&lt;SPtr&gt; childrens = ele-&gt;children()[1]-&gt;children(); 
			for (SPtr child : childrens) 
			{ 
				childrenVector.push_back(child-&gt;children()[0]-&gt;value()); 
			} 
			element.children = childrenVector; 
			save(k, element);//check if the key exists and then push into db 
		} 
	} 
	catch (std::exception& ex) 
	{ 
		std::cout &lt;&lt; "Exception " &lt;&lt; ex.what(); 
	} 
</pre>} 
//converting strng date to time_t object 
template&lt;typename Data&gt; 
time_t NoSqlDb&lt;Data&gt;::DateTimeFromString(const char * buff) 
{<button onclick="myFunction(this)" id="button122">-</button><pre class="showElem" id="button122_pre"> 
	time_t timeobj; 
	try 
	{ 
		struct tm time = { 0 }; 
		int year = 0, month = 0, day = 0, hour = 0, min = 0, sec = 0; 
		sscanf_s(buff, "%d-%d-%d_%d:%d:%d", &year, &month, &day, &hour, &min, &sec); 
		time.tm_year = year - 1900; 
		time.tm_mon = month - 1; 
		time.tm_mday = day; 
		time.tm_hour = hour; 
		time.tm_min = min; 
		time.tm_sec = sec; 
		timeobj = mktime(&time); 
		return timeobj; 
	} 
	catch (std::exception& ex) 
	{ 
		std::cout &lt;&lt; "Exception " &lt;&lt; ex.what(); 
	} 
	return timeobj; 
</pre>} 
//converting time_t to string date 
template&lt;typename Data&gt; 
std::string NoSqlDb&lt;Data&gt;::DateTimeToString(time_t t) 
{<button onclick="myFunction(this)" id="button123">-</button><pre class="showElem" id="button123_pre"> 
	std::string dat; 
	try 
	{ 
		struct tm  timestruct = {}; 
		char buffer[80]; 
		localtime_s(&timestruct, &t); 
		strftime(buffer, sizeof(buffer), "%Y-%m-%d_%X", &timestruct); 
		std::string date(buffer); 
		return date; 
	} 
	catch (std::exception& ex) 
	{ 
		std::cout &lt;&lt; "Exception " &lt;&lt; ex.what(); 
	} 
	return  dat; 
</pre>} 
//return the number of elements in the db 
template&lt;typename Data&gt; 
size_t NoSqlDb&lt;Data&gt;::count() 
{<button onclick="myFunction(this)" id="button124">-</button><pre class="showElem" id="button124_pre"> 
	return store.size(); 
</pre>} 
// writes content to file 
template&lt;typename Data&gt; 
bool NoSqlDb&lt;Data&gt;::writeTofile(std::string content, std::string fName) 
{<button onclick="myFunction(this)" id="button125">-</button><pre class="showElem" id="button125_pre"> 
	try 
	{ 
		std::ofstream fstream(fName); 
		if (fstream.is_open()) 
		{ 
			fstream &lt;&lt; content; 
			fstream.close(); 
		} 
		else 
		{ 
			std::cout &lt;&lt; "Unable to open file"; 
			return false; 
		} 
	} 
	catch (std::exception& ex) 
	{ 
		std::cout &lt;&lt; "Exception " &lt;&lt; ex.what(); 
		return false; 
	} 
	return true; 
</pre>} 
//reads contents from a file 
template&lt;typename Data&gt; 
std::string NoSqlDb&lt;Data&gt;::readFromFile(std::string fName) 
{<button onclick="myFunction(this)" id="button126">-</button><pre class="showElem" id="button126_pre"> 
	std::string filestr; 
	try 
	{ 
		std::string line; 
		std::ifstream file(fName); 
		if (file.is_open()) 
		{ 
			while (getline(file, line)) 
			{ 
				filestr = filestr + line; 
				// cout &lt;&lt; line &lt;&lt; '\n'; 
			} 
			file.close(); 
			std::cout &lt;&lt; filestr; 
		} 
		else 
		{ 
			std::cout &lt;&lt; "Unable to open file"; 
		} 
	} 
	catch (std::exception& ex) 
	{ 
		std::cout &lt;&lt; "Exception " &lt;&lt; ex.what(); 
	} 
	return filestr; 
</pre>} 
// sets the persistance count, after which the db should be written to xml file 
template&lt;typename Data&gt; 
inline bool NoSqlDb&lt;Data&gt;::setPersistCounter(int persistCount) 
{<button onclick="myFunction(this)" id="button127">-</button><pre class="showElem" id="button127_pre"> 
	persistLimit = persistCount; 
	return true; 
</pre>} 
//sets the xml file path where the db contents will be persisted 
template&lt;typename Data&gt; 
inline bool NoSqlDb&lt;Data&gt;::setxmlFilePath(std::string xmlPath) 
{<button onclick="myFunction(this)" id="button128">-</button><pre class="showElem" id="button128_pre"> 
	xmlFpath = xmlPath; 
	return true; 
</pre>} 
</pre>
<script src="../JS/hideHandler.js"></script>
</body>
</html>