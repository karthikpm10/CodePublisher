<!----------------------------------------------------------------------------
   ScopeStack.h.htm  -Published HTML File
   Published on : 2017-04-04.21:42:49
   Author:Karthik Palepally Muniyappa  
----------------------------------------------------------------------------->
<html>
<head>
<link rel="stylesheet" href="../CSS/style.css">
</head>
<body>
<h3>ScopeStack.h</h3>
<hr />
<div class="indent">
<h4>Dependencies:</h4>
<ul>
<li><a href="ScopeStack.cpp.htm">ScopeStack.cpp</a></li>
<li><a href="ScopeStack.cpp.htm">ScopeStack.cpp</a></li>
<li><a href="Logger.h.htm">Logger.h</a></li>
<li><a href="Utilities.h.htm">Utilities.h</a></li>
<li><a href="Utilities.h.htm">Utilities.h</a></li>
<li><a href="GrammarHelpers.cpp.htm">GrammarHelpers.cpp</a></li>
<li><a href="Executive.cpp.htm">Executive.cpp</a></li>
</ul>
</div>
<hr />
<pre>
#ifndef SCOPESTACK_H 
#define SCOPESTACK_H 
///////////////////////////////////////////////////////////////////////////// 
// ScopeStack.h - implements template stack holding specified element type // 
// ver 2.2                                                                 // 
// Language:      Visual C++ 2010, SP1                                     // 
// Platform:      Dell Precision T7400, Win 7 Pro SP1                      // 
// Application:   Code Analysis Research                                   // 
// Author:        Jim Fawcett, CST 4-187, Syracuse University              // 
//                (315) 443-3948, jfawcett@twcny.rr.com                    // 
///////////////////////////////////////////////////////////////////////////// 
/* 
  Package Operations: 
  =================== 
  This package contains one class: ScopeStack&lt;element&gt;.  The element type 
  is an application specific type designed to hold whatever information you 
  need to stack. 
 
  Throws std::exception if stack is popped or peeked when empty. 
 
  Public Interface: 
  ================= 
  ScopeStack&lt;element&gt; stack; 
  // define some element type 
  element elem; 
  stack.push(elem); 
  element popped = stack.pop(); 
 
  Required Files: 
  =============== 
  ScopeStack.h, ScopeStack.cpp 
 
  Build Command: 
  ============== 
  devenv ScopeStack.sln /rebuild debug 
 
  Maintenance History: 
  ==================== 
  ver 2.2 : 29 Oct 2016 
  - added throw when popping or peeking empty stack 
  ver 2.1 : 02 Jun 2011 
  - changed ScopeStack type to single template argument intended to be 
    an application specific type (usually a struct that holds whatever 
    is needed) 
  ver 2.0 : 02 Feb 2011 
  - fixed bug in pop() method found by Drumil Bhattad 
  ver 1.0 : 31 Jan 2011 
  - first release 
*/ 
#include &lt;list&gt; 
#include "../Logger/Logger.h" 
#include "../Utilities/Utilities.h" 
 
// element is a application specific type.  It must provide a function: 
// std::string show() that returns a string display of its parts. see 
// test stub for an example. 
 
namespace CodeAnalysis 
{ 
  template&lt;typename element&gt; 
  class ScopeStack {<button onclick="myFunction(this)" id="button233">-</button><pre class="showElem" id="button233_pre"> 
  public: 
    using Rslt = Logging::StaticLogger&lt;0&gt;;    // show program results 
    using Demo = Logging::StaticLogger&lt;1&gt;;    // show demonstration outputs 
    using Dbug = Logging::StaticLogger&lt;2&gt;;    // show debugging outputs 
    typename typedef std::list&lt;element&gt;::iterator iterator; 
 
    ScopeStack(); 
    void push(const element& item); 
    element pop(); 
    element& top(); 
    element& predOfTop(); 
    size_t size(); 
    iterator begin(); 
    iterator end(); 
  private: 
    std::list&lt;element&gt; stack; 
    element dbElement; 
</pre>  }; 
 
  template&lt;typename element&gt; 
  ScopeStack&lt;element&gt;::ScopeStack() {} 
 
  template&lt;typename element&gt; 
  typename inline size_t ScopeStack&lt;element&gt;::size() { return stack.size(); } 
 
  template&lt;typename element&gt; 
  typename inline ScopeStack&lt;element&gt;::iterator ScopeStack&lt;element&gt;::begin() { return stack.begin(); } 
 
  template&lt;typename element&gt; 
  typename inline ScopeStack&lt;element&gt;::iterator ScopeStack&lt;element&gt;::end() { return stack.end(); } 
 
  template&lt;typename element&gt; 
  void ScopeStack&lt;element&gt;::push(const element& item) 
  {<button onclick="myFunction(this)" id="button238">-</button><pre class="showElem" id="button238_pre"> 
    Demo::flush(); 
    stack.push_back(item); 
    Dbug::write("\n--- stack size = " + Utilities::Converter&lt;size_t&gt;::toString(size()) + " ---"); 
    Dbug::flush(); 
</pre>  } 
 
  template&lt;typename element&gt; 
  element ScopeStack&lt;element&gt;::pop() 
  {<button onclick="myFunction(this)" id="button239">-</button><pre class="showElem" id="button239_pre"> 
    if (stack.size() == 0) 
    { 
      throw std::exception("-- attempting to pop empty stack --"); 
    } 
    element item = stack.back(); 
    stack.pop_back();     
    Dbug::write("\n--- stack size = " + Utilities::Converter&lt;size_t&gt;::toString(size()) + " ---"); 
    Dbug::flush(); 
 
    return item; 
</pre>  } 
 
  template&lt;typename element&gt; 
  element& ScopeStack&lt;element&gt;::top() 
  {<button onclick="myFunction(this)" id="button240">-</button><pre class="showElem" id="button240_pre"> 
    if (stack.size() == 0) 
    { 
      throw std::exception("-- attempting to peek top on empty stack --"); 
    } 
    return stack.back(); 
</pre>  } 
 
  template&lt;typename element&gt; 
  element& ScopeStack&lt;element&gt;::predOfTop() 
  {<button onclick="myFunction(this)" id="button241">-</button><pre class="showElem" id="button241_pre"> 
    if (size() &lt; 2) 
    { 
      throw std::exception("-- predOfTop() called on stack with less than two elements --"); 
    } 
    iterator iter = --(--end()); 
    return *iter; 
</pre>  } 
 
  template&lt;typename element&gt; 
  void showStack(ScopeStack&lt;element&gt;& stack, bool indent = true) 
  {<button onclick="myFunction(this)" id="button242">-</button><pre class="showElem" id="button242_pre"> 
    if (stack.size() == 0) 
    { 
      std::cout &lt;&lt; "\n  ScopeStack is empty"; 
      return; 
    } 
    ScopeStack&lt;element&gt;::iterator iter = stack.begin(); 
    while (iter != stack.end()) 
    { 
      std::string strIndent = std::string(2 * stack.size(), ' '); 
      if (!indent) 
        strIndent = ""; 
      element temp = *iter; 
      std::cout &lt;&lt; "\n  " &lt;&lt; strIndent &lt;&lt; temp-&gt;show(); 
      ++iter; 
    } 
</pre>  } 
 
  template&lt;typename element&gt; 
  void showStack(ScopeStack&lt;element*&gt;& stack, bool indent = true) 
  {<button onclick="myFunction(this)" id="button243">-</button><pre class="showElem" id="button243_pre"> 
    if (stack.size() == 0) 
    { 
      std::cout &lt;&lt; "\n  ScopeStack is empty"; 
      return; 
    } 
    ScopeStack&lt;element*&gt;::iterator iter = stack.begin(); 
    while (iter != stack.end()) 
    { 
      std::string strIndent = std::string(2 * stack.size(), ' '); 
      if (!indent) 
        strIndent = ""; 
      std::cout &lt;&lt; "\n  " &lt;&lt; strIndent &lt;&lt; ((*iter)-&gt;show()); 
      ++iter; 
    } 
</pre>  } 
  //----&lt; walk tree of element nodes &gt;--------------------------------- 
 
  template&lt;typename element&gt; 
  void TreeWalk(element* pItem, bool details = false) 
  {<button onclick="myFunction(this)" id="button244">-</button><pre class="showElem" id="button244_pre"> 
    static std::string path; 
    static size_t indentLevel = 0; 
    std::ostringstream out; 
    out &lt;&lt; "\n  " &lt;&lt; std::string(2 * indentLevel, ' ') &lt;&lt; pItem-&gt;show(); 
    std::cout &lt;&lt; out.str(); 
    auto iter = pItem-&gt;children_.begin(); 
    ++indentLevel; 
    while (iter != pItem-&gt;children_.end()) 
    { 
      TreeWalk(*iter); 
      ++iter; 
    } 
    --indentLevel; 
</pre>  } 
} 
#endif 
</pre>
<script src="../JS/hideHandler.js"></script>
</body>
</html>