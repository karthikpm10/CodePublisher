<!----------------------------------------------------------------------------
   Logger.cpp.htm  -Published HTML File
   Published on : 2017-04-04.21:42:55
   Author:Karthik Palepally Muniyappa  
----------------------------------------------------------------------------->
<html>
<head>
<link rel="stylesheet" href="../CSS/style.css">
</head>
<body>
<h3>Logger.cpp</h3>
<hr />
<div class="indent">
<h4>Dependencies:</h4>
<ul>
<li><a href="Logger.h.htm">Logger.h</a></li>
<li><a href="FileSystem.cpp.htm">FileSystem.cpp</a></li>
<li><a href="Utilities.h.htm">Utilities.h</a></li>
<li><a href="Utilities.h.htm">Utilities.h</a></li>
</ul>
</div>
<hr />
<pre>
///////////////////////////////////////////////////////////////////// 
// Logger.cpp - log text messages to std::ostream                  // 
// ver 1.2                                                         // 
//-----------------------------------------------------------------// 
// Jim Fawcett (c) copyright 2015                                  // 
// All rights granted provided this copyright notice is retained   // 
//-----------------------------------------------------------------// 
// Language:    C++, Visual Studio 2015                            // 
// Application: Several Projects, CSE687 - Object Oriented Design  // 
// Author:      Jim Fawcett, Syracuse University, CST 4-187        // 
//              jfawcett@twcny.rr.com                              // 
///////////////////////////////////////////////////////////////////// 
 
#include &lt;functional&gt; 
#include &lt;fstream&gt; 
#include &lt;windows.h&gt; 
#include "Logger.h" 
#include "../Utilities/Utilities.h" 
 
using namespace Logging; 
 
//----&lt; send text message to std::ostream &gt;-------------------------- 
 
void Logger::write(const std::string& msg) 
{<button onclick="myFunction(this)" id="button566">-</button><pre class="showElem" id="button566_pre"> 
  if(_ThreadRunning) 
    _queue.enQ(msg); 
</pre>} 
void Logger::title(const std::string& msg, char underline) 
{<button onclick="myFunction(this)" id="button567">-</button><pre class="showElem" id="button567_pre"> 
  std::string temp = "\n  " + msg + "\n " + std::string(msg.size() + 2, underline); 
  write(temp); 
</pre>} 
//----&lt; attach logger to existing std::ostream &gt;--------------------- 
 
void Logger::attach(std::ostream* pOut) <button onclick="myFunction(this)" id="button568">-</button><pre class="showElem" id="button568_pre"> 
{  
  streams_.push_back(pOut); 
  //_pOut = pOut;  
</pre>} 
//----&lt; start logging &gt;---------------------------------------------- 
/* 
 *  log to all the attached streams 
 */ 
void Logger::start() 
{<button onclick="myFunction(this)" id="button569">-</button><pre class="showElem" id="button569_pre"> 
  if (_ThreadRunning) 
    return; 
  _ThreadRunning = true; 
  std::function&lt;void()&gt; tp = [=]() {<button onclick="myFunction(this)" id="button570">-</button><pre class="showElem" id="button570_pre"> 
    while (true) 
    { 
      std::string msg = _queue.deQ(); 
      if (msg == "quit") 
      { 
        _ThreadRunning = false; 
        break; 
      } 
      for (auto pStrm : streams_) 
      { 
        *pStrm &lt;&lt; msg; 
      } 
</pre>    } 
  }; 
  _pThr = new std::thread (tp); 
  //thr.detach(); 
</pre>} 
//----&lt; has logger been started? &gt;----------------------------------- 
 
bool Logger::running() 
{<button onclick="myFunction(this)" id="button571">-</button><pre class="showElem" id="button571_pre"> 
  return _ThreadRunning; 
</pre>} 
//----&lt; suspend logger &gt;--------------------------------------------- 
 
void Logger::pause(bool doPause) 
{<button onclick="myFunction(this)" id="button572">-</button><pre class="showElem" id="button572_pre"> 
  if (doPause) 
  { 
    _Paused = true; 
    ::SuspendThread(_pThr-&gt;native_handle()); 
  } 
  else 
  { 
    _Paused = false; 
    ::ResumeThread(_pThr-&gt;native_handle()); 
  } 
</pre>} 
//----&lt; is logger currently paused? &gt;-------------------------------- 
 
bool Logger::paused() 
{<button onclick="myFunction(this)" id="button573">-</button><pre class="showElem" id="button573_pre"> 
  return _Paused; 
</pre>} 
//----&lt; wait for logging to empty input queue &gt;---------------------- 
 
void Logger::flush() 
{<button onclick="myFunction(this)" id="button574">-</button><pre class="showElem" id="button574_pre"> 
  if (_ThreadRunning && !_Paused) 
  { 
    while (_queue.size() &gt; 0) 
      ; 
    for (auto pStream : streams_) 
      pStream-&gt;flush(); 
  } 
</pre>} 
//----&lt; stop logging &gt;----------------------------------------------- 
 
void Logger::stop(const std::string& msg) 
{<button onclick="myFunction(this)" id="button575">-</button><pre class="showElem" id="button575_pre"> 
  if (_ThreadRunning) 
  { 
    if(msg != "") 
      write(msg); 
    write("quit");    // request thread to stop 
    if (_pThr-&gt;joinable()) 
      _pThr-&gt;join();  // wait for queue to empty 
 
    _ThreadRunning = false; 
  } 
</pre>} 
//----&lt; wait for logger to finish &gt;---------------------------------- 
 
void Logger::wait() 
{<button onclick="myFunction(this)" id="button576">-</button><pre class="showElem" id="button576_pre"> 
  if (_ThreadRunning && _pThr-&gt;joinable()) 
    _pThr-&gt;join(); 
</pre>} 
//----&lt; stop logging thread &gt;---------------------------------------- 
 
Logger::~Logger() 
{<button onclick="myFunction(this)" id="button577">-</button><pre class="showElem" id="button577_pre"> 
  stop(); 
</pre>} 
 
struct Cosmetic 
{ 
  ~Cosmetic() { std::cout &lt;&lt; "\n\n"; } 
} cosmetic; 
 
#ifdef TEST_LOGGER 
 
using Util = Utilities::StringHelper; 
 
int main() 
{<button onclick="myFunction(this)" id="button579">-</button><pre class="showElem" id="button579_pre"> 
  //Util::Title("Testing Logger Class"); 
  Logger log; 
  log.attach(&std::cout); 
  std::ofstream out("logFile.txt"); 
  if (out.good()) 
    log.attach(&out); 
  else 
    std::cout &lt;&lt; "\n  couldn't open logFile for writing"; 
  log.write("\n  won't get logged - not started yet"); 
  log.start(); 
  log.title("Testing Logger Class", '='); 
  log.write("\n  one"); 
  log.write("\n  two"); 
  log.write("\n  fini"); 
  log.stop(); 
  log.write("\n  won't get logged - stopped"); 
  log.start(); 
  log.write("\n  starting again"); 
  log.write("\n  and stopping again"); 
  log.stop("\n  log terminating now"); 
  log.wait(); 
 
  StaticLogger&lt;1&gt;::attach(&std::cout); 
  StaticLogger&lt;1&gt;::attach(&out); 
  StaticLogger&lt;1&gt;::start(); 
  StaticLogger&lt;1&gt;::write("\n"); 
  StaticLogger&lt;1&gt;::title("Testing StaticLogger class"); 
  StaticLogger&lt;1&gt;::write("\n  static logger at work"); 
  Logger& logger = StaticLogger&lt;1&gt;::instance(); 
  logger.write("\n  static logger still at work"); 
 
  for(size_t i=0; i&lt;5; ++i) 
    logger.write("\n  a log msg"); 
  logger.write("\n  suspending logger"); 
  logger.pause(true); 
  for (size_t i = 0; i&lt;5; ++i) 
    logger.write("\n  a log msg written while log suspended"); 
 
  logger.pause(false); 
  logger.write("\n  a log msg written after log resumed"); 
  logger.stop("\n  stopping static logger"); 
  logger.wait(); 
  out.close(); 
</pre>} 
 
#endif 
</pre>
<script src="../JS/hideHandler.js"></script>
</body>
</html>