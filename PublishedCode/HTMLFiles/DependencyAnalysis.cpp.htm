<!----------------------------------------------------------------------------
   DependencyAnalysis.cpp.htm  -Published HTML File
   Published on : 2017-04-04.21:42:52
   Author:Karthik Palepally Muniyappa  
----------------------------------------------------------------------------->
<html>
<head>
<link rel="stylesheet" href="../CSS/style.css">
</head>
<body>
<h3>DependencyAnalysis.cpp</h3>
<hr />
<div class="indent">
<h4>Dependencies:</h4>
<ul>
<li><a href="DependencyAnalysis.h.htm">DependencyAnalysis.h</a></li>
<li><a href="NoSqlDb.h.htm">NoSqlDb.h</a></li>
<li><a href="DBWrapper.h.htm">DBWrapper.h</a></li>
<li><a href="Typtable.h.htm">Typtable.h</a></li>
<li><a href="Tokenizer.h.htm">Tokenizer.h</a></li>
<li><a href="Tokenizer.h.htm">Tokenizer.h</a></li>
<li><a href="FileSystem.h.htm">FileSystem.h</a></li>
</ul>
</div>
<hr />
<pre>
#include"DependencyAnalysis.h" 
using namespace CodeAnalysis; 
 
//constructor which accepts the xml name for the dependency table xml 
DependencyTable::DependencyTable(std::string xmlName) 
{<button onclick="myFunction(this)" id="button409">-</button><pre class="showElem" id="button409_pre"> 
	xmlPath =  xmlName; 
	//setting the xml path for the db to persist and the write counter after which the db persists 
	DependecyTableDB.setPersistCountXMlPath(xmlPath, 100); 
 
</pre>} 
 
//uextracts file names from file path 
std::stack&lt;std::string&gt; DependencyTable::split(const std::string s, char delim) {<button onclick="myFunction(this)" id="button410">-</button><pre class="showElem" id="button410_pre"> 
	std::stack&lt;std::string&gt; elems; 
	std::stringstream ss(s); 
	std::string item; 
	while (std::getline(ss, item, delim)) { 
		if (item.length() &gt; 0) { 
			elems.push(item); 
		} 
	} 
	return elems; 
</pre>} 
//inserts dependency for a given key(file) into the DB 
void DependencyTable::insertFileDpndncy(std::string key, std::vector&lt;std::string&gt; depFile) 
{<button onclick="myFunction(this)" id="button411">-</button><pre class="showElem" id="button411_pre"> 
	//gets the record from the db 
	Element&lt;std::string&gt; record = DependecyTableDB.getRecord(DependecyTableDB.getDBKeys(), key); 
	if (string(record.name) != "") 
	{ 
		//iterate over depfile 
		std::vector&lt;std::string&gt; children = record.children; 
		for (size_t i = 0; i &lt; depFile.size(); i++) { 
			// chek if depFile[i] is already present in the children vector, if so dont update, if not update 
			bool duplicate = false; 
			for (size_t k = 0; k &lt; children.size(); k++) { 
				if ((children[k] == depFile[i])) 
				{ 
					duplicate = true; 
					break; 
				} 
			} 
			if ((!duplicate)) 
			{ 
				DependecyTableDB.updateElement(key, "children", depFile[i], true); 
				children.push_back(depFile[i]); 
			} 
				 
		} 
	} 
	else 
	{ 
		removeDuplicates(depFile); 
		DependecyTableDB.insertElement(key, "DependencyTable", "Files", "DependencyTableFiles", depFile, "DependentFiles"); 
	} 
</pre>} 
//builds the dependency table from the type table info and by tokenizing each file 
bool DependencyTable::buildDependencyTable(std::vector&lt;std::string&gt; fileNames, TypeTable &typeTable) 
{<button onclick="myFunction(this)" id="button412">-</button><pre class="showElem" id="button412_pre"> 
	std::string fileSpec = ""; 
	try 
	{ 
		std::vector&lt;std::string&gt;::iterator fileSpec; 
		for (fileSpec = fileNames.begin(); fileSpec &lt; fileNames.end(); fileSpec++) { 
			std::stack&lt;std::string&gt; fileNamesSplit = split(*fileSpec, '\\'); 
			std::string fileName = fileNamesSplit.top(); 
 
			std::ifstream in(*fileSpec); 
			if (!in.good()) 
			{ 
				std::cout &lt;&lt; "\n  can't open " &lt;&lt; *fileSpec &lt;&lt; "\n\n"; 
				return 1; 
			} 
			{ 
				Scanner::Toker toker; 
				toker.returnComments(); 
				toker.attach(&in); 
				do 
				{ 
					std::string tok = toker.getTok(); 
					if (tok == "\n") 
						tok = "newline"; 
					//std::cout &lt;&lt; "\n -- " &lt;&lt; tok; 
					std::vector&lt;std::string&gt; files = typeTable.getTypeDefinationFnames(tok); 
					if (files.size() &gt; 0) 
					{ 
						insertFileDpndncy(*fileSpec, files); 
						 
					} 
				} while (in.good()); 
			} 
		} 
	} 
	catch (std::logic_error& ex) 
	{ 
		std::cout &lt;&lt; ex.what(); 
	} 
	return 0; 
</pre>} 
//return the keys from the db 
vector&lt;string&gt; DependencyTable::getDBKeys() 
{<button onclick="myFunction(this)" id="button413">-</button><pre class="showElem" id="button413_pre"> 
	vector&lt;string&gt; keyss = DependecyTableDB.getDBKeys(); 
	return keyss; 
</pre>} 
//return a record from the db 
Element&lt;std::string&gt; DependencyTable::getRecord(std::string ky) 
{<button onclick="myFunction(this)" id="button414">-</button><pre class="showElem" id="button414_pre"> 
	Element&lt;std::string&gt; record = DependecyTableDB.getRecord(DependecyTableDB.getDBKeys(), ky); 
	return record; 
</pre>} 
//prints the dependendcy table 
void CodeAnalysis::DependencyTable::showDepTable() 
{<button onclick="myFunction(this)" id="button415">-</button><pre class="showElem" id="button415_pre"> 
	DependecyTableDB.showDB(); 
	cout &lt;&lt; "\n****************************Dependency Table Stored in " &lt;&lt; FileSystem::Path::getFullFileSpec(xmlPath) &lt;&lt; " *************************************\n"; 
</pre>} 
//removes duplicates from vector 
void DependencyTable::removeDuplicates(std::vector&lt;std::string&gt;& vec) 
{<button onclick="myFunction(this)" id="button416">-</button><pre class="showElem" id="button416_pre"> 
	std::sort(vec.begin(), vec.end()); 
	vec.erase(std::unique(vec.begin(), vec.end()), vec.end()); 
</pre>} 
 
#ifdef DEBUGDEPENDENCYTABLE 
int main() 
{<button onclick="myFunction(this)" id="button417">-</button><pre class="showElem" id="button417_pre"> 
	TypeTable objtypeTable; 
	objtypeTable.doTypeAnal(); 
	DependencyTable obj("../../xml.xml"); 
	obj.buildDependencyTable(fileNames, objtypeTable); 
	vector&lt;string&gt; keys = obj.getDBKeys(); 
	Element&lt;std::string&gt; ele = obj.getRecord("A"); 
	showDepTable(); 
	return 0; 
</pre>} 
#endif 
 
 
 
 
</pre>
<script src="../JS/hideHandler.js"></script>
</body>
</html>